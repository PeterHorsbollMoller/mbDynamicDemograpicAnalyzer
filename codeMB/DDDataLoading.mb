'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Precisely
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
Include "Enums.def"
'**default constants...
Include "Library\Defaults.def"

'-------------------------------------
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\ProgramInfo.def"
Include "Library\RIBBONLib.def"
Include "Library\TABLELib.def"
Include "Library\Types\T_LAYER_SETTINGS.def"
Include "Library\Types\T_LABEL_SETTINGS.def"

Include "DDFunctions.def"
Include "DDConfigDlg.def"
Include "DDLoadDataDlg.def"
Include "DDDataLoading.def"

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDDataLoading

Dim	sTempFolder, sPath, sFile, sFileNoExt, sTable, sTabBoundary As String,
	nTime, nFile, nDaypart, nDatatype, nBoundaryType, nCharsSaved As Integer

OnError GoTo ErrorOccured

	If NumTables() > 0 Then
		If Ask("Close all tables to continue?", "Abort", "Close All") Then
			Exit Sub
		End If
		Close All Interactive
		If NumTables() > 0 Then
			Exit Sub
		End If
	End If

	If Not DDLoadDataDlg() Then
		Exit Sub
	End If

	nTime		= Timer()
	sTempFolder	= PathToDirectory$(TempFileName$(""))
	nBoundaryType	= DDLDGetBoundaryType()

	Call DEBUGPrint("-------------------------------------------")
	Call DEBUGPrint("Data Path: " & DDCGetDDMainDataFolder())
	Call DEBUGPrint("Boundary Type: " & DDFGetBoundaryDescription(nBoundaryType))
	Call DEBUGPrint("Load Boundary File: " & IIf(DDLDLoadBoundaryFiles(), "YES", "NO"))
	Call DEBUGPrint("Load Orig2Dest Files: " & IIf(DDLDLoadOrig2DestFiles(), "YES", "NO"))
	Call DEBUGPrint("Number of Data Files to load: " & DDLDGetNumberOfDataFiles())
	For nFile = 1 To DDLDGetNumberOfDataFiles()
		nDatatype	= DDLDGetDataType(nFile)
		Call DEBUGPrint("   " & nFile & ": " & nDatatype & " - " & DDFGetDataTypeDescription(nDatatype))
	Next

	'**B O U N D A R I E S
	Print "-------------------------------------------"
	Print Time(24) & " Process 1 of 3: Boundary File"
	If DDLDLoadBoundaryFiles() Then
'		Call DEBUGPrint("-------------------------------------------")
		'**"\boundaries\<boundary type>\"
		sPath		= DDFGetDataTypeFolderPath(DDCGetDDMainDataFolder(), TRUE, DD_DATATYPE_BOUNDARIES, nBoundaryType)
'		Call DEBUGPrint(DDCGetDataTypeDescription(DD_DATATYPE_BOUNDARIES) & ": Path '" & sPath & "'")
		sFile		= DDFGetBoundaryFileName(DDCGetDDMainDataFolder(), TRUE, DD_DATATYPE_BOUNDARIES, 0, nBoundaryType, "TXT")
		If sFile = "" Then
			Note DDFGetDataTypeDescription(DD_DATATYPE_BOUNDARIES) & " not found! Data loading process aborted!"
			Exit Sub
		End If
		sFileNoExt	= PathToFileName$(sFile)
		sFileNoExt	= Left$(sFileNoExt, Len(sFileNoExt) - 4)
		sTable		= PathToTableName$(sFile)

'		Call DEBUGPrint(DDFGetDataTypeDescription(DD_DATATYPE_BOUNDARIES) & ": Loading from '" & PathToFileName$(sFile) & "' into '" & sPath & sFileNoExt & ".tab'")
		Print Time(24) & " 1 of 1: Loading " & DDFGetDataTypeDescription(DD_DATATYPE_BOUNDARIES) & ": " & PathToFileName$(sFile)

		Register Table sFile
			Type OGR
			Table sTable
			Driver "CSV"
			Openoptions "AUTODETECT_TYPE=YES;KEEP_GEOM_COLUMNS=NO;GEOM_POSSIBLE_NAMES=geometry"
			Cache On
			Charset "WindowsLatin1"
			Regionstyle Pen(1, 2, RED) Brush(1,BLACK,BLACK)
			CoordSys Earth Projection 1, 104
			Into sTempFolder & "_temp.tab"

		Print Time(24) & "   Opening TXT file..."
		Open Table sTempFolder & "_temp.tab"
'		Call DEBUGPrint("Commit Table _temp As " & sPath & sFileNoExt & ".tab Type NATIVEX")
		Print Time(24) & "   Saving into NativeX Tab file..."
		Commit Table _temp As sPath & sFileNoExt & ".tab" Type NATIVEX
		Close Table _temp
		Open Table sPath & sFileNoExt & ".tab"
		Print Time(24) & "   Minimizing Char columns..."
		nCharsSaved = DDDataMinimizeCharColumns(sTable)
		Print Time(24) & "   Indexing Area_ID column..."
		Create Index On sTable (AREA_ID)
'		Call DEBUGPrint("   Data loaded! '" & sTable & "' holds " & FormatNumber$(TableInfo(sTable, TAB_INFO_NROWS)) & " records.")
		Close Table sTable
	Else
		Print Time(24) & " Not configured to run"
	End If

'	Call DEBUGPrint("-------------------------------------------")
'	Call DEBUGPrint(DDFGetDataTypeDescription(DD_DATATYPE_BOUNDARIES) & ": Opening... ")
	sFile			= DDFGetBoundaryFileName(DDCGetDDMainDataFolder(), TRUE, DD_DATATYPE_BOUNDARIES, 0, nBoundaryType, "TAB")
	sTabBoundary		= PathToTableName$(sFile)
	If Not TABIsOpen(sTabBoundary) Then
		Open Table sFile
		If Not TABIsOpen(sTabBoundary) Then
			sTabBoundary = ""
			Note "Table with boundaries could not be opened. You will not be able to add boundaries to your data files. The data loading process stops now"
			Exit Sub
		End If
	End If

	'**O R I G I N    T O    D E S T I N A T I O N S
	Print "-------------------------------------------"
	Print Time(24) & " Process 2 of 3: Origin To Destination Files"
	If DDLDLoadOrig2DestFiles() Then
'		Call DEBUGPrint("-------------------------------------------")
		sPath		= DDFGetDataTypeFolderPath(DDCGetDDMainDataFolder(), TRUE, DD_DATATYPE_ORIG_2_DESTINATION, nBoundaryType)
		For nDaypart = 1 To DD_NUM_DAYPARTS
			sFile		= DDFGetBoundaryFileName(DDCGetDDMainDataFolder(), TRUE, DD_DATATYPE_ORIG_2_DESTINATION, nDaypart, nBoundaryType, "TXT")
			If sFile <> "" Then
				sFileNoExt	= PathToFileName$(sFile)
				sFileNoExt	= Left$(sFileNoExt, Len(sFileNoExt) - 4)
				sTable		= PathToTableName$(sFile)

'				Call DEBUGPrint(nDaypart & ": " & DDFGetDataTypeDescription(DD_DATATYPE_ORIG_2_DESTINATION) & ": Loading from '" & PathToFileName$(sFile) & "' into '" & sFileNoExt & ".tab'")
				Print Time(24) & " " & nDaypart & " of " & DD_NUM_DAYPARTS & ": Loading " & DDFGetDataTypeDescription(DD_DATATYPE_ORIG_2_DESTINATION) & ": " & PathToFileName$(sFile)

				Register Table sFile
					Type OGR
					Table sTable
					Driver "CSV"
					Openoptions "AUTODETECT_TYPE=YES"
					Cache On
					Charset "WindowsLatin1"
					Into sTempFolder & "_temp.tab"

				If nDaypart = 1 Then
					Print Time(24) & "   Opening TXT file..."
				End If
				Open Table sTempFolder & "_temp.tab"
				If nDaypart = 1 Then
					Print Time(24) & "   Saving into NativeX Tab file..."
				End If
				Commit Table _temp As sTempFolder & "_tempNative.tab" Type NATIVEX
				Close Table _temp
				Open Table sTempFolder & "_tempNative.tab"
				If nDaypart = 1 Then
					Print Time(24) & "   Minimizing Char Columns..."
				End If
				nCharsSaved = DDDataMinimizeCharColumns("_tempNative")
'				Call DEBUGPrint("   Data loaded! '" & sTable & "' holds " & FormatNumber$(TableInfo(_tempNative, TAB_INFO_NROWS)) & " records.")

				If nDaypart = 1 Then
					Print Time(24) & "   Joining with Boundaries..."
				End If
				Select d.*
					From sTabBoundary As "b", _tempNative As "d"
					Where b.AREA_ID = d.DEST_AREA_ID
					Into __JOINED NoSelect

				If nDaypart = 1 Then
					Print Time(24) & "   Saving Joined Result into NativeX Tab file..."
				End If
				Commit Table "__JOINED" As sPath & sFileNoExt & ".tab" Type NATIVEX
				Close Table _tempNative
				Open Table sPath & sFileNoExt & ".tab"
				If nDaypart = 1 Then
					Print Time(24) & "   Indexing Dest_Area_ID and Origin_Area_ID columns..."
				End If
				Create Index On sTable (DEST_AREA_ID)
				Create Index On sTable (ORIGIN_AREA_ID)
'				Call DEBUGPrint("   Data joined with boundaries! '" & sTable & "' holds " & FormatNumber$(TableInfo(sTable, TAB_INFO_NROWS)) & " records.")
				Close Table sTable
			Else
				Print Time(24) & " " & nDaypart & ": " & DDFGetDaypartDescription(nDaypart) & " - " & DDFGetDataTypeDescription(DD_DATATYPE_ORIG_2_DESTINATION) & ": File Not Found!"
			End If
		Next
	Else
		Print Time(24) & " Not configured to run"
	End If

	'**D A T A    F I L E S
	Print "-------------------------------------------"
	Print Time(24) & " Process 3 of 3: Data Files"
	If DDLDGetNumberOfDataFiles() = 0 Then
		Print Time(24) & " Not configured to run"
	End If

	For nFile = 1 To DDLDGetNumberOfDataFiles()
'		Call DEBUGPrint("-------------------------------------------")
		Print "-------------------------------------------"
		Print Time(24) & " Sub Process " & nFile & " of " & DDLDGetNumberOfDataFiles()
		nDatatype		= DDLDGetDataType(nFile)
		sPath		= DDFGetDataTypeFolderPath(DDCGetDDMainDataFolder(), TRUE, nDatatype, nBoundaryType)
		If DDFIsDataTypeSplitByDaypart(DDLDGetDataType(nFile)) Then
			For nDaypart = 1 To DD_NUM_DAYPARTS
				sFile		= DDFGetBoundaryFileName(DDCGetDDMainDataFolder(), TRUE, nDatatype, nDaypart, nBoundaryType, "TXT")
				If sFile <> "" Then
					sFileNoExt	= PathToFileName$(sFile)
					sFileNoExt	= Left$(sFileNoExt, Len(sFileNoExt) - 4)
					sTable		= PathToTableName$(sFile)

'					Call DEBUGPrint(nDaypart & ": " & DDFGetDataTypeDescription(nDatatype) & ": Loading from '" & PathToFileName$(sFile) & "' into '" & sFileNoExt & ".tab'")
					Print Time(24) & " " & nDaypart & " of " & DD_NUM_DAYPARTS & ": Loading " & DDFGetDataTypeDescription(nDatatype) & ": " & PathToFileName$(sFile)

					Register Table sFile
						Type OGR
						Table sTable
						Driver "CSV"
						Openoptions "AUTODETECT_TYPE=YES"
						Cache On
						Charset "WindowsLatin1"
						Into sTempFolder & "_temp.tab"

					If nDaypart = 1 Then
						Print Time(24) & "   Opening TXT file..."
					End If
					Open Table sTempFolder & "_temp.tab"
					If nDaypart = 1 Then
						Print Time(24) & "   Saving into NativeX Tab file..."
					End If
					Commit Table _temp As sTempFolder & "_tempNative.tab" Type NATIVEX
					Close Table _temp
					Open Table sTempFolder & "_tempNative.tab"
					If nDaypart = 1 Then
						Print Time(24) & "   Minimizing Char Columns..."
					End If
					nCharsSaved = DDDataMinimizeCharColumns("_tempNative")
'					Call DEBUGPrint("   Data loaded! '" & sTable & "' holds " & FormatNumber$(TableInfo(_tempNative, TAB_INFO_NROWS)) & " records.")

					If nDaypart = 1 Then
						Print Time(24) & "   Joining with Boundaries..."
					End If
					Select d.*
						From sTabBoundary As "b", _tempNative As "d"
						Where b.AREA_ID = d.DEST_AREA_ID
						Into __JOINED NoSelect

					If nDaypart = 1 Then
						Print Time(24) & "   Saving Joined Result into NativeX Tab file..."
					End If
					Commit Table "__JOINED" As sPath & sFileNoExt & ".tab" Type NATIVEX
					Close Table _tempNative
					Open Table sPath & sFileNoExt & ".tab"
					If nDaypart = 1 Then
						Print Time(24) & "   Indexing Dest_Area_ID column..."
					End If
					Create Index On sTable (DEST_AREA_ID)
'					Call DEBUGPrint("   Data joined with boundaries! '" & sTable & "' holds " & FormatNumber$(TableInfo(sTable, TAB_INFO_NROWS)) & " records.")
					Close Table sTable
				Else
					Print Time(24) & " " & nDaypart & ": " & DDFGetDaypartDescription(nDaypart) & " - " & DDFGetDataTypeDescription(nDatatype) & ": File Not Found!"
				End If
			Next
		Else
			nDaypart	= 0
			sFile	= DDFGetBoundaryFileName(DDCGetDDMainDataFolder(), TRUE, nDatatype, nDaypart, nBoundaryType, "TXT")
			If sFile <> "" Then
				sFileNoExt	= PathToFileName$(sFile)
				sFileNoExt	= Left$(sFileNoExt, Len(sFileNoExt) - 4)
				sTable		= PathToTableName$(sFile)

'				Call DEBUGPrint(DDFGetDataTypeDescription(nDatatype) & ": Loading from '" & PathToFileName$(sFile) & "' into '" & sFileNoExt & ".tab'")
				Print Time(24) & " 1 of 1: Loading " & DDFGetDataTypeDescription(nDatatype) & ": " & PathToFileName$(sFile)

				Register Table sFile
					Type OGR
					Table sTable
					Driver "CSV"
					Openoptions "AUTODETECT_TYPE=YES"
					Cache On
					Charset "WindowsLatin1"
					Into sTempFolder & "_temp.tab"

				Print Time(24) & "   Opening TXT file..."
				Open Table sTempFolder & "_temp.tab"
				Print Time(24) & "   Saving into NativeX Tab file..."
				Commit Table _temp As sTempFolder & "_tempNative.tab" Type NATIVEX
				Close Table _temp
				Open Table sTempFolder & "_tempNative.tab"
				Print Time(24) & "   Minimizing Char Columns..."
				nCharsSaved = DDDataMinimizeCharColumns("_tempNative")
'				Call DEBUGPrint("   Data loaded! '" & sTable & "' holds " & FormatNumber$(TableInfo(_tempNative, TAB_INFO_NROWS)) & " records.")

				Print Time(24) & "   Joining with Boundaries..."
				Select d.*
					From sTabBoundary As "b", _tempNative As "d"
					Where b.AREA_ID = d.DEST_AREA_ID
					Into __JOINED NoSelect
				Print Time(24) & "   Saving Joined Result into NativeX Tab file..."
				Commit Table "__JOINED" As sPath & sFileNoExt & ".tab" Type NATIVEX
				Close Table _tempNative
				Open Table sPath & sFileNoExt & ".tab"
				Print Time(24) & "   Indexing Dest_Area_ID column..."
				Create Index On sTable (DEST_AREA_ID)
'				Call DEBUGPrint("   Data joined with boundaries! '" & sTable & "' holds " & FormatNumber$(TableInfo(sTable, TAB_INFO_NROWS)) & " records.")
				Close Table sTable
			Else
				Print Time(24) & " " & DDFGetDataTypeDescription(nDatatype) & ": File Not Found!"
			End If
		End If
	Next	'nFile

	Call TABClose(sTabBoundary)

	Print Time(24) & " Data Loading finished after " & FormatNumber$(Timer() - nTime) & " seconds"
	Call RBNNotificationShow(PRGIGetApplicationName(), "Data Loading has finished after " & FormatNumber$(Timer() - nTime) & " seconds", Notify_Info, 10000)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDDataLoading")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Function DDDataMinimizeCharColumns(	ByVal sTab As String) As Integer

Dim	nCol, nWidthMax, nWidth, nCharRemoved As Integer,
	sCmd, sCol As String,
	aCol As Alias

OnError GoTo ErrorOccured

DDDataMinimizeCharColumns = 0

	For nCol = 1 To TableInfo(sTab, TAB_INFO_NCOLS)
		sCol = ColumnInfo(sTab, "COL" & nCol, COL_INFO_NAME)
		If ColumnInfo(sTab, sCol, COL_INFO_TYPE) = COL_TYPE_CHAR Then

			aCol = sTab & "." & sCol
			Select Max(Len(aCol)) "MAX_WIDTH"
				From sTab
				Into __MAX NoSelect Hide

			Fetch First From __MAX
			nWidthMax = __MAX.MAX_WIDTH
			Close Table __MAX

			nWidth = ColumnInfo(sTab, sCol, COL_INFO_WIDTH)
			If (nWidth - nWidthMax) > 10 Then
				nCharRemoved = nCharRemoved + (nWidth - nWidthMax)
				If sCmd = "" Then
					sCmd = sCol & " Char(" & nWidthMax & ")"
				Else
					sCmd = sCmd & ", " & sCol & " Char(" & nWidthMax & ")"
				End If
			End If
		End If
	Next

	If sCmd <> "" Then
		sCmd = "Alter Table " & sTab & " ( Modify " & sCmd & ")"
		Call DEBUGPrint("DDDataMinimizeCharColumns: " & sCmd)
		Set Progressbars Off
		Run Command sCmd
		Set Progressbars On
	End If

	DDDataMinimizeCharColumns = nCharRemoved

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDDataMinimizeCharColumns")
	Call ERRShow()

End Function