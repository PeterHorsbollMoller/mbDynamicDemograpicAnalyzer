'*******************************************************************************
'** 	Created By Peter Horsbøll Møller, Precisely
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "MapBasic.def"
Include "Icons.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"

'-------------------------------------
Include "Library\ARRAYLib.def"
Include "Library\DEBUGLib.def"
Include "Library\FILELib.def"
Include "Library\ERRORLib.def"
Include "Library\LAYERLib.def"
Include "Library\RIBBONLib.def"
Include "Library\TABLELib.def"
Include "Library\Types\T_LAYER_SETTINGS.def"
Include "Library\Types\T_LABEL_SETTINGS.def"

Include "DDFunctions.def"
Include "DDConfigDlg.def"

Declare Sub DDCHandler_OnLoad
Declare Sub DDCHandler_OKClicked
Declare Sub DDCHandler_LoadDataTypes
Declare Sub DDCHandler_LoadBoundaryTypes
Declare Sub DDCHandler_UpdateLayerClicked
Declare Sub DDCHandler_UpdateLayer(ByVal nItem As Integer)
Declare Sub DDCHandler_SelectBoundaryFile
Declare Sub DDCHandler_SelectOrigin2DestFile
Declare Sub DDCHandler_SelectMainFolder
Declare Sub DDCHandler_LayerClicked
Declare Sub DCCHandler_DataTypeUseClicked
Declare Sub DDCHandler_DataTypeClicked
Declare Sub DDCHandler_DaypartClicked
Declare Sub DDCHandler_BoundaryClicked
Declare Sub DDCHandler_RefreshTableControls

Define	CTRL_CHK_SPLIT_WORK_HOME		100
Define	CTRL_LST_LAYERS			200
Define	CTRL_TXT_LAYERS			201
Define	CTRL_CMD_UPDATE_LAYER		210
Define	CTRL_TXT_BOUNDARY			300
Define	CTRL_CMD_SELECT_BOUNDARY		310
Define	CTRL_TXT_ORIG_2_DEST		400
Define	CTRL_CMD_SELECT_ORIG_2_DEST	410
Define	CTRL_TXT_MAIN_FOLDER		500
Define	CTRL_CMD_SELECT_MAIN_FOLDER	510
Define	CTRL_LST_DATATYPES			600
Define	CTRL_CHK_DATATYPES_USE		610
Define	CTRL_LST_DAYPART			700
Define	CTRL_LST_BOUNDARYTYPES		800


Dim	mbSplitByWorkerHome As Logical,
	marrSubFolders(), marrDataTypeDescriptions(), marrBoundaryDescriptions() As String,
	marrDatatypes(), marrBoundaryTypes() As Integer,
	marrDayparts() As String,
	mnDayPart, mnDataType, mnBoundaryType As Integer,
	msDDMainDataFolder, msBoundaryFile, msOrigin2DestinationFile As String,
	marrOpenLayerNames() As String,
	marrLayerNames(), marrLayerTypes() As String,
	marrOpenLayerIDs(), arrOpenLayersIndex() As Integer,
	marrLayerUpdate() As Logical,
	marrLayerSettings() As T_LAYER_SETTINGS,
	marrLabelSettings() As T_LABEL_SETTINGS

'Tables:
'..\age_gender\pivoted\*age_gender_aft_*.tab
'..\age_gender\pivoted\*age_gender_eve_*.tab
'..\age_gender\pivoted\*age_gender_mor_*.tab
'..\age_gender\pivoted\*age_gender_ngt_*.tab
'..\purchasing_power\pivoted\*purchasing_power_household_aft_*.tab
'..\purchasing_power\pivoted\*purchasing_power_household_eve_*.tab
'..\purchasing_power\pivoted\*purchasing_power_household_mor_*.tab
'..\purchasing_power\pivoted\*purchasing_power_household_ngt_*.tab
'..\purchasing_power\pivoted\*purchasing_power_inh_aft_*.tab
'..\purchasing_power\pivoted\*purchasing_power_inh_eve_*.tab
'..\purchasing_power\pivoted\*purchasing_power_inh_mor_*.tab
'..\purchasing_power\pivoted\*purchasing_power_inh_ngt_*.tab

'*Structured differently
'..\consumer_styles\pivoted\*consumer_styles_*.tab

'..\origin_destination\pivoted\*origin_destination_aft_*.tab
'..\origin_destination\pivoted\*origin_destination_eve_*.tab
'..\origin_destination\pivoted\*origin_destination_mor_*.tab
'..\origin_destination\pivoted\*origin_destination_ngt_*.tab

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DDConfigDlg() As Logical

Dim	i As Integer
OnError GoTo ErrorOccured

DDConfigDlg = FALSE

	ReDim arrOpenLayersIndex(0)
	ReDim marrOpenLayerNames(0)
	ReDim marrOpenLayerIDs(0)
	ReDim marrLayerUpdate(0)

	If DDFGetDaypartDescriptions(marrDayparts()) = 0 Then
		Note "No dayparts found!"
		Exit Function
	End If

	Dialog
		Title "Configuration"
		Calling DDCHandler_OnLoad

		'**************************************************************************************
		Control StaticText
			Position 5,5
			Title "Main Dynamic Demographic Data Folder"
		Control EditText		ID CTRL_TXT_MAIN_FOLDER
			Position 5,15		Width 320
			Value FILEGetRelativePath(ApplicationDirectory$(), DDCGetDDMainDataFolder())
		Control Button			ID CTRL_CMD_SELECT_MAIN_FOLDER
			Position 325,15	Width 15	Height 13
			Title "..."
			Calling DDCHandler_SelectMainFolder

		'**************************************************************************************
		Control CheckBox		ID CTRL_CHK_DATATYPES_USE
			Position 5,30
			Title "Use Data Type"
			Value (DDCGetDataType() <= DD_NUM_DATATYPES)
			Calling DCCHandler_DataTypeUseClicked
		Control ListBox		ID CTRL_LST_DATATYPES
			Position 5,40		Width 120	Height 40
			Calling DDCHandler_DataTypeClicked

		'**************************************************************************************
		Control StaticText
			Position 130,30
			Title "Time of Day"
		Control ListBox		ID CTRL_LST_DAYPART
			Position 130,40	Width 85	Height 40
			Calling DDCHandler_DaypartClicked
			Title From Variable marrDayparts
			Value DDCGetDayPart()

		Control StaticText
			Position 5,90
			Title "For the Time of Day 'Total' and 'Week part', Data Types will get disabled. Orig to Destination will be used."

		'**************************************************************************************
		Control StaticText
			Position 220,30
			Title "Boundary"
		Control ListBox		ID CTRL_LST_BOUNDARYTYPES
			Position 220,40	Width 120	Height 40
			Calling DDCHandler_BoundaryClicked
			Title From Variable marrBoundaryDescriptions
			Value DDCGetDayPart()

		'**************************************************************************************
		Control StaticText
			Position 5,105
			Title "Boundary Data Type MapInfo Tab File"
		Control EditText		ID CTRL_TXT_BOUNDARY
			Position 5,115		Width 335
			Value FILEGetRelativePath(DDCGetDDMainDataFolder(), DDCGetBoundaryFile())
			Disable

'		'**************************************************************************************
		Control StaticText
			Position 5,130
			Title "Origin to Destination MapInfo Tab File"
'			Hide
		Control EditText		ID CTRL_TXT_ORIG_2_DEST
			Position 5,140		Width 335
			Value FILEGetRelativePath(DDCGetDDMainDataFolder(), DDCGetOrigin2DestFile())
			Disable

		'**************************************************************************************
		Control CheckBox		ID CTRL_CHK_SPLIT_WORK_HOME
			Position 5,160
			Title "Split result by Worker/Home"
			Value DDCSplitByWorkerHome()

		'**************************************************************************************
		Control StaticText		ID CTRL_TXT_LAYERS
			Position 5,175
			Title "Update Layer Settings"
		Control ListBox		ID CTRL_LST_LAYERS
			Position 5,185		Width 335	Height 70
			Calling DDCHandler_LayerClicked
		Control Button			ID CTRL_CMD_UPDATE_LAYER
			Position 205,255	Width 135
			Title "Read Styles from Layer"
			Calling DDCHandler_UpdateLayerClicked

		'**************************************************************************************
		Control OKButton
			Position 255,275	Width 40
			Calling DDCHandler_OKClicked
		Control CancelButton
			Position 300,275	Width 40

	If not CommandInfo(CMD_INFO_DLG_OK) Then
		Exit Function
	End If

	DDConfigDlg = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDConfigDlg")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_OnLoad

Dim	nMID, nLayer, nFound, nCount As Integer,
	sLayerName As String

OnError GoTo ErrorOccured

'	Call DEBUGPrint(Ubound(marrLayerNames()) & " Layers defined: " & ARRAYToSeparatedTextString(marrLayerNames, ", "))

	nMID = FrontWindow()
	If nMID <> 0 Then
		If WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
			For nLayer = 1 To MapperInfo(nMID, MAPPER_INFO_LAYERS)
				sLayerName	= LayerInfo(nMID, nLayer, LAYER_INFO_NAME)
	'			Call DEBUGPrint("Looking for '" & sLayerName & "'")

				nFound = ARRAYFindValueString(marrLayerNames(), sLayerName)
				If nFound > 0 Then
					nCount = Ubound(marrOpenLayerNames) + 1

					ReDim arrOpenLayersIndex(nCount)
					arrOpenLayersIndex(nCount)	= nFound
					ReDim marrOpenLayerNames(nCount)
					marrOpenLayerNames(nCount)	= sLayerName '& "(" & marrLayerTypes(nFound) & ")"
					ReDim marrOpenLayerIDs(nCount)
					marrOpenLayerIDs(nCount)		= nLayer
					ReDim marrLayerUpdate(nCount)
					marrLayerUpdate(nCount)		= FALSE
				End If
			Next
		End If
	End If

	If Ubound(arrOpenLayersIndex) = 0 Then
		ReDim marrOpenLayerNames(1)
		marrOpenLayerNames(1) = "Run the Analyzer to create layers to read settings from!"
		Alter Control CTRL_TXT_LAYERS			Disable
		Alter Control CTRL_LST_LAYERS			Disable
		Alter Control CTRL_CMD_UPDATE_LAYER	Disable
	Else
		Alter Control CTRL_TXT_LAYERS			Enable
		Alter Control CTRL_LST_LAYERS			Enable
		Alter Control CTRL_CMD_UPDATE_LAYER	Enable
	End If

	Alter Control CTRL_LST_LAYERS Title From Variable marrOpenLayerNames

	Call DDCHandler_DaypartClicked

	Call DDCHandler_LoadDataTypes
	Call DCCHandler_DataTypeUseClicked

	Call DDCHandler_LoadBoundaryTypes

	Call DDCHandler_RefreshTableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_OnLoad")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_OKClicked

Dim	nMID, nLayer, nItemDatatype, nDatatype, nDaypart, nBoundary As Integer,
	sPath, sFile As String

OnError GoTo ErrorOccured

	'**Main Data Folder
	sPath = ReadControlValue(CTRL_TXT_MAIN_FOLDER)
	If sPath = "" Then
		Note "Please specify a dynamic demographic main data folder!"
		Alter Control CTRL_TXT_MAIN_FOLDER Active
	End If
	sPath = FILEGetAbsolutePath(ApplicationDirectory$(), sPath)
	If Not FileExists(sPath) Then
		Note "Please specify an existing folder as the dynamic demographic data folder!"
		Alter Control CTRL_TXT_MAIN_FOLDER Active
	End If
	Call DDCSetDDMainDataFolder(sPath)

	nBoundary		= ReadControlValue(CTRL_LST_BOUNDARYTYPES)
	Call DEBUGPrint("You selected boundary type " & nBoundary & " - " & DDFGetBoundaryDescription(nBoundary))
	Call DDCSetBoundaryType(nBoundary)

	nDaypart		= ReadControlValue(CTRL_LST_DAYPART)
	Call DEBUGPrint("You selected daypart " & nDaypart & " - " & DDFGetDaypartDescription(nDaypart))
	Call DDCSetDayPart(nDaypart)

	If ReadControlValue(CTRL_CHK_DATATYPES_USE) Then
		nItemDatatype	= ReadControlValue(CTRL_LST_DATATYPES)
		nDatatype		= marrDatatypes(nItemDatatype)
		Call DEBUGPrint("You selected datatype " & nDatatype & " referring to " & DDFGetDataTypeFolderPath(sPath, TRUE, nDatatype, DDCGetBoundaryType()))
		Call DDCSetDataType(nDatatype)
	Else
		nDatatype		= DD_DATATYPE_BOUNDARIES	'DD_DATATYPE_ORIG_2_DESTINATION
		Call DDCSetDataType(nDatatype)
	End If

	Call DDCSetBoundaryFile(DDFGetBoundaryFileName(sPath, TRUE, nDatatype, nDaypart, nBoundary, "TAB"))
	Call DEBUGPrint("Boundary File: " & DDCGetBoundaryFile())

	Call DDCSetOrigin2DestFile(DDFGetOrigin2DestFileName(sPath, TRUE, DD_DATATYPE_ORIG_2_DESTINATION, nDaypart, nBoundary, "TAB"))
	Call DEBUGPrint("Orig2Destination File: " & DDCGetOrigin2DestFile())

	If DDCGetOrigin2DestFile() = "" Or DDCGetBoundaryFile() = "" Then
		Note "It seems the selected tables do not exist. Try to load the data using this tool and run the Configuration dialog again"
	End If

	'**Split by Worker/Home
	Call DDCSetSplitByWorkerHome(ReadControlValue(CTRL_CHK_SPLIT_WORK_HOME))

	'**Read Layer Settings
	If Ubound(arrOpenLayersIndex) > 0 Then
		nMID	= FrontWindow()
		For nLayer = 1 To Ubound(marrOpenLayerNames)
			If marrLayerUpdate(nLayer) Then
'				Call DEBUGPrint("Refresh Layer '" & marrOpenLayerNames(nLayer) & "' using Layer ID '" & marrOpenLayerIDs(nLayer) & "'")
				Call tlsGetInfo(nMID, marrOpenLayerIDs(nLayer), marrLayerSettings(arrOpenLayersIndex(nLayer)))
				Call tlbsGetInfo(nMID, marrOpenLayerIDs(nLayer), marrLabelSettings(arrOpenLayersIndex(nLayer)))
			End If
		Next
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_OKClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_LoadDataTypes

Dim	nDataTypeItem, nDataType As Integer,
	sPath As String

OnError GoTo ErrorOccured

	sPath	= ReadControlValue(CTRL_TXT_MAIN_FOLDER)
	sPath	= FILEGetAbsolutePath(ApplicationDirectory$(), sPath)

	Redim marrDatatypes(0)
	Redim marrDataTypeDescriptions(0)
	If DDFGetDataTypes(sPath, marrDatatypes, marrDataTypeDescriptions) > 0 Then
		Alter Control CTRL_LST_DATATYPES	Title From Variable marrDataTypeDescriptions

		If Not ReadControlValue(CTRL_CHK_DATATYPES_USE) Then
			nDataTypeItem = ARRAYFindValueInteger(marrDatatypes, DDCGetDataType())
			If nDataTypeItem > 0 Then
				Alter Control CTRL_LST_DATATYPES	Value nDataTypeItem
			End If
		End If
	Else
		Alter Control CTRL_LST_DATATYPES	Title From Variable marrDataTypeDescriptions
		Note "Please select a folder with at least one sub folder!"
		Exit Sub
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_LoadDataTypes")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_LoadBoundaryTypes

Dim	sPath As String

OnError GoTo ErrorOccured

	sPath	= ReadControlValue(CTRL_TXT_MAIN_FOLDER)
	sPath	= FILEGetAbsolutePath(ApplicationDirectory$(), sPath)

	Redim marrBoundaryTypes(0)
	Redim marrBoundaryDescriptions(0)
	If DDFGetBoundaryTypes(sPath, marrBoundaryTypes(), marrBoundaryDescriptions()) > 0 Then
		Alter Control CTRL_LST_BOUNDARYTYPES	Title From Variable marrBoundaryDescriptions
		Alter Control CTRL_LST_BOUNDARYTYPES	Value DDCGetBoundaryType()
	Else
		Alter Control CTRL_LST_BOUNDARYTYPES	Title From Variable marrBoundaryDescriptions
		Note "Please select a folder with at least one sub folder!"
		Exit Sub
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_LoadBoundaryTypes")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DCCHandler_DataTypeUseClicked

OnError GoTo ErrorOccured

	If ReadControlValue(CTRL_CHK_DATATYPES_USE) Then
		Alter Control CTRL_LST_DATATYPES Enable
	Else
		Alter Control CTRL_LST_DATATYPES Disable
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DCCHandler_DataTypeUseClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_DataTypeClicked

Dim	nItemDatatype, nDatatype As Integer

OnError GoTo ErrorOccured

	nItemDatatype	= ReadControlValue(CTRL_LST_DATATYPES)
	If nItemDatatype = 0 Then
		Exit Sub
	End If
	nDatatype		= marrDatatypes(nItemDatatype)

	Call DEBUGPrint("You click datatype " & nDatatype & " " & DDFGetDataTypeDescription(nDatatype))
	Call DDCHandler_RefreshTableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_DataTypeClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_DaypartClicked

Dim	nDaypart As Integer

OnError GoTo ErrorOccured

	nDaypart		= ReadControlValue(CTRL_LST_DAYPART)
	If nDaypart = 0 Then
		Exit Sub
	End If

	If nDaypart In (DD_DAYPART_TOTAL, DD_DAYPART_WEEKPART) Then
		Alter Control CTRL_CHK_DATATYPES_USE Value FALSE
		Alter Control CTRL_CHK_DATATYPES_USE Disable
'		Alter Control CTRL_CHK_SPLIT_WORK_HOME Value FALSE
'		Alter Control CTRL_CHK_SPLIT_WORK_HOME Disable
	Else
		Alter Control CTRL_CHK_DATATYPES_USE Enable
'		Alter Control CTRL_CHK_SPLIT_WORK_HOME Enable
	End If
	Call DCCHandler_DataTypeUseClicked

	Call DEBUGPrint("You click daypart " & nDaypart & " " & DDFGetDaypartDescription(nDaypart))
	Call DDCHandler_RefreshTableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_DaypartClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_BoundaryClicked

Dim	nItemBoundary, nBoundary As Integer

OnError GoTo ErrorOccured

	nItemBoundary	= ReadControlValue(CTRL_LST_BOUNDARYTYPES)
	If nItemBoundary = 0 Then
		Exit Sub
	End If
	nBoundary		= marrBoundaryTypes(nItemBoundary)

	Call DEBUGPrint("You click boundary " & nBoundary & " " & DDFGetBoundaryDescription(nBoundary))
	Call DDCHandler_RefreshTableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_BoundaryClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_RefreshTableControls

Dim	nItemDatatype, nDatatype, nDaypart, nItemBoundary, nBoundary As Integer,
	sPath, sFile As String

OnError GoTo ErrorOccured

	If ReadControlValue(CTRL_CHK_DATATYPES_USE) Then
		nItemDatatype	= ReadControlValue(CTRL_LST_DATATYPES)
		If nItemDatatype = 0 Then
			Exit Sub
		End If
		nDatatype		= marrDatatypes(nItemDatatype)
		Call DEBUGPrint("You selected datatype " & nDatatype & " referring to " & DDFGetDataTypeFolderPath(sPath, TRUE, nDatatype, DDCGetBoundaryType()))
	Else
		nDatatype		= DD_DATATYPE_BOUNDARIES	'DD_DATATYPE_ORIG_2_DESTINATION
	End If

	nDaypart		= ReadControlValue(CTRL_LST_DAYPART)
	If nDaypart = 0 Then
		Exit Sub
	End If
	nItemBoundary	= ReadControlValue(CTRL_LST_BOUNDARYTYPES)
	If nItemBoundary = 0 Then
		Exit Sub
	End If
	nBoundary		= marrBoundaryTypes(nItemBoundary)
	sPath		= ReadControlValue(CTRL_TXT_MAIN_FOLDER)
	sPath		= FILEGetAbsolutePath(ApplicationDirectory$(), sPath)

	Call DEBUGPrint("---------------------------------------")
	sFile	= DDFGetBoundaryFileName(sPath, TRUE, nDatatype, nDaypart, nBoundary, "TAB")
	Call DEBUGPrint("Boundary File: " & sFile)
	Alter Control CTRL_TXT_BOUNDARY	Value FILEGetRelativePath(sPath, sFile)

	sFile	= DDFGetOrigin2DestFileName(sPath, TRUE, DD_DATATYPE_ORIG_2_DESTINATION, nDaypart, nBoundary, "TAB")
	Call DEBUGPrint("Orig2Dest File: " & sFile)
	Alter Control CTRL_TXT_ORIG_2_DEST	Value FILEGetRelativePath(sPath, sFile)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_RefreshTableControls")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_LayerClicked

Dim	nItem As Integer

OnError GoTo ErrorOccured

	nItem = ReadControlValue(CTRL_LST_LAYERS)
	If CommandInfo(CMD_INFO_DLG_DBL) Then
		Call DDCHandler_UpdateLayer(nItem)
	Else
		If nItem > 0 Then
			Alter Control CTRL_CMD_UPDATE_LAYER Enable
		Else
			Alter Control CTRL_CMD_UPDATE_LAYER Enable
		End If
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_LayerClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_UpdateLayerClicked

Dim	nItem As Integer

OnError GoTo ErrorOccured

	nItem = ReadControlValue(CTRL_LST_LAYERS)
	If nItem > 0 Then
		Call DDCHandler_UpdateLayer(nItem)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_LayerClicked")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_UpdateLayer(ByVal nItem As Integer)

OnError GoTo ErrorOccured

	If nItem = 0 Then
		Exit Sub
	End If
	If NOT Left$(marrOpenLayerNames(nItem), 2) = "+ " Then
		marrOpenLayerNames(nItem)	= "+ " & marrOpenLayerNames(nItem)
		marrLayerUpdate(nItem)		= TRUE
'	Else
'		marrOpenLayerNames(nItem)	= Right$(marrOpenLayerNames(nItem), Len(marrOpenLayerNames(nItem)) - 2)
'		marrLayerUpdate(nItem)		= FALSE
	End If

	Alter Control CTRL_LST_LAYERS Title From Variable marrOpenLayerNames
	Alter Control CTRL_LST_LAYERS Value nItem

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_UpdateLayer")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_SelectBoundaryFile

Dim	sFile As String

OnError GoTo ErrorOccured

	sFile	= FILEGetRelativePath(DDCGetDDMainDataFolder(), ReadControlValue(CTRL_TXT_BOUNDARY))
	sFile	= FileOpenDlg(PathToDirectory$(sFile), PathToFileName$(sFile), "TAB", "Select Dynamic Demographic Boundary file...")
	If sFile = "" Then
		Exit Sub
	End If

	Alter Control CTRL_TXT_BOUNDARY	Value FILEGetRelativePath(ApplicationDirectory$(), sFile)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_SelectBoundaryFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_SelectOrigin2DestFile

Dim	sFile As String

OnError GoTo ErrorOccured

	sFile	= FILEGetRelativePath(DDCGetDDMainDataFolder(), ReadControlValue(CTRL_TXT_ORIG_2_DEST))
	sFile	= FileOpenDlg(PathToDirectory$(sFile), PathToFileName$(sFile), "TAB", "Select Dynamic Demographic Origin to Destination file...")
	If sFile = "" Then
		Exit Sub
	End If

	Alter Control CTRL_TXT_ORIG_2_DEST	Value FILEGetRelativePath(ApplicationDirectory$(), sFile)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_SelectOrigin2DestFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCHandler_SelectMainFolder

Dim	sPath  As String

OnError GoTo ErrorOccured

	sPath	= FILEGetAbsolutePath(ApplicationDirectory$(), ReadControlValue(CTRL_TXT_MAIN_FOLDER))
	sPath	= FILEBrowseForFolder("Select Dynamic Demographic Data folder...", sPath)
	If sPath = "" Then
		Exit Sub
	End If

	Alter Control CTRL_TXT_MAIN_FOLDER	Value FILEGetRelativePath(ApplicationDirectory$(), sPath)
	Call DDCHandler_LoadDataTypes
	Call DDCHandler_LoadBoundaryTypes

	Call DDCHandler_RefreshTableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCHandler_SelectMainFolder")
	Call ERRShow()

End Sub

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DDCSetSplitByWorkerHome(ByVal bValue As Logical)

OnError GoTo ErrorOccured

	mbSplitByWorkerHome = bValue
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCSetSplitByWorkerHome")

End Sub
'**********************************************************************************************''
Function DDCSplitByWorkerHome() As Logical

OnError GoTo ErrorOccured

	DDCSplitByWorkerHome = mbSplitByWorkerHome
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCSplitByWorkerHome")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DDCSetBoundaryFile(ByVal sFile As String)

OnError GoTo ErrorOccured

	msBoundaryFile = sFile
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCSetBoundaryFile")

End Sub
'**********************************************************************************************''
Function DDCGetBoundaryFile() As String

OnError GoTo ErrorOccured

	DDCGetBoundaryFile = msBoundaryFile
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCGetBoundaryFile")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DDCSetOrigin2DestFile(ByVal sFile As String)

OnError GoTo ErrorOccured

	msOrigin2DestinationFile = sFile
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCSetOrigin2DestFile")

End Sub
'**********************************************************************************************''
Function DDCGetOrigin2DestFile() As String

OnError GoTo ErrorOccured

	DDCGetOrigin2DestFile = msOrigin2DestinationFile
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCGetOrigin2DestFile")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DDCSetDDMainDataFolder(ByVal sFolder As String)

OnError GoTo ErrorOccured

	msDDMainDataFolder = FILEAddBackSlash(sFolder)
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCSetDDMainDataFolder")

End Sub
'**********************************************************************************************''
Function DDCGetDDMainDataFolder() As String

OnError GoTo ErrorOccured

	DDCGetDDMainDataFolder = msDDMainDataFolder
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCGetDDMainDataFolder")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DDCSetDayPart(ByVal nDaypart As Integer)

OnError GoTo ErrorOccured

	mnDayPart = nDaypart
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCSetDayPart")

End Sub
'**********************************************************************************************''
Function DDCGetDayPart() As Integer

OnError GoTo ErrorOccured

	DDCGetDayPart = Maximum(mnDayPart, 1)	'Make sure to get minimum 1
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCGetDayPart")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DDCSetDataType(ByVal nDataType As Integer)

OnError GoTo ErrorOccured

	mnDataType = nDataType
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCSetDataType")

End Sub
'**********************************************************************************************''
Function DDCGetDataType() As Integer

OnError GoTo ErrorOccured

	DDCGetDataType = mnDataType	'if zero, do not use data types in the analysis
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCGetDataType")

End Function

'**********************************************************************************************''
Function DDCGetCurrentDataTypeFolder() As String

OnError GoTo ErrorOccured

	DDCGetCurrentDataTypeFolder = DDFGetDataTypeFolderPath(DDCGetDDMainDataFolder(), TRUE, DDCGetDataType(), DDCGetBoundaryType())

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCGetCurrentDataTypeFolder")

End Function

'**********************************************************************************************''
' Property
'**********************************************************************************************''
Sub DDCSetBoundaryType(ByVal nBoundaryType As Integer)

OnError GoTo ErrorOccured

	mnBoundaryType = nBoundaryType
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCSetBoundaryType")

End Sub
'**********************************************************************************************''
Function DDCGetBoundaryType() As Integer

OnError GoTo ErrorOccured

	DDCGetBoundaryType = mnBoundaryType	'If 0, undefined
	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCGetBoundaryType")

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub DDCAddLayerSettings(	  ByVal sName As String
					, ByVal sType As String
					, tLyr As T_LAYER_SETTINGS
					, tLbl AS T_LABEL_SETTINGS)

Dim	nCount As Integer

OnError GoTo ErrorOccured

	nCount = Ubound(marrLayerNames) + 1

	Redim marrLayerNames(nCount)
	marrLayerNames(nCount)	= sName
	Redim marrLayerTypes(nCount)
	marrLayerTypes(nCount)	= sType

	Redim marrLayerSettings(nCount)
	Call tlsCopy(tLyr, marrLayerSettings(nCount))
	Redim marrLabelSettings(nCount)
	Call tlbsCopy(tLbl, marrLabelSettings(nCount))

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCAddLayerSettings")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DDCGetLayerSettings(	  ByVal sName As String
						, ByVal sType As String
						, tLyr As T_LAYER_SETTINGS
						, tLbl AS T_LABEL_SETTINGS
						) As Logical

Dim	nLayerIndex As Integer

OnError GoTo ErrorOccured

DDCGetLayerSettings = FALSE

	nLayerIndex	= ARRAYFindValueString(marrLayerNames(), sName)
	If nLayerIndex = 0 Then
		If sType = "" Then
			sType = DDFGetLayerTypeFromLayerName(sName)
		End If
		If sType = "" Then
			Exit Function
		End If

		nLayerIndex	= ARRAYFindValueString(marrLayerTypes(), sType)
		If nLayerIndex = 0 Then
			Exit Function
		End If
	End If

'	Call DEBUGPrint("DDCGetLayerSettings 1: " & sName & ": Brush Overrides: " & Ubound(marrLayerSettings(nLayerIndex).brsOverride) & " versus " & Ubound(tLyr.brsOverride))
	Call tlsCopy(marrLayerSettings(nLayerIndex), tLyr)
'	Call DEBUGPrint("DDCGetLayerSettings 2: " & sName & ": Brush Overrides: " & Ubound(marrLayerSettings(nLayerIndex).brsOverride) & " versus " & Ubound(tLyr.brsOverride))
	Call tlbsCopy(marrLabelSettings(nLayerIndex), tLbl)

	DDCGetLayerSettings = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCGetLayerSettings")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function DDCApplyLayerSettings( ByVal nMID As Integer
						, ByVal sName As String
						, ByVal sType As String
						) As Logical

Dim	nLayerID, nLayerIndex As Integer,
	sCmd As String

OnError GoTo ErrorOccured

DDCApplyLayerSettings = FALSE

	nLayerIndex	= ARRAYFindValueString(marrLayerNames(), sName)
	If nLayerIndex = 0 Then
		If sType = "" Then
			sType = DDFGetLayerTypeFromLayerName(sName)
		End If
		If sType = "" Then
			Exit Function
		End If

		nLayerIndex	= ARRAYFindValueString(marrLayerTypes(), sType)
		If nLayerIndex = 0 Then
			Exit Function
		End If
	End If

	nLayerID		= LAYERGetLayerNumber(nMID, sName)
	If nLayerID = 0 Then
		Exit Function
	End If

	sCmd	= tlsGetSetMapStatement(nMID, nLayerID, marrLayerSettings(nLayerIndex))
	If sCmd = "" Then
		Exit Function
	End If
	sCmd	= "Set Map Window " & nMID & " Layer " & nLayerID & " " & sCmd
'	Call DEBUGPrint(sCmd)
	Run Command sCmd

	sCmd	= tlbsGetSetMapStatementNoExpr(nMID, nLayerID, marrLabelSettings(nLayerIndex))
	If sCmd = "" Then
		Exit Function
	End If
	sCmd	= "Set Map Window " & nMID & " Layer " & nLayerID & " " & sCmd
	Call DEBUGPrint(sCmd)
	Run Command sCmd

	DDCApplyLayerSettings = TRUE
	'**If the expression part fails, we still consider the function to work as it should

	sCmd	= tlbsGetSetMapStatementOnlyExpr(nMID, nLayerID, marrLabelSettings(nLayerIndex))
	If sCmd = "" Then
		Exit Function
	End If

OnError GoTo ErrorOccuredLabelExpr
	sCmd	= "Set Map Window " & nMID & " Layer " & nLayerID & " " & sCmd
	Call DEBUGPrint(sCmd)
	Run Command sCmd

	Exit Function
'-------------------------
ErrorOccuredLabelExpr:
	Call ERRCreate(Err(), Error$(), "DDCApplyLayerSettings: " & sCmd)
	Call ERRPrint()
	If ERRGetLatestErrorNo() = 414 Then
		Set Map Window nMID Layer nLayerID Label With COL1
	End If

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "DDCApplyLayerSettings: " & sCmd)
	Call ERRPrint()

End Function
