'*******************************************************************************
'**   Created by Peter Horsbøll Møller, Precisely
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************

'-------------------------------------
Include "Enums.def"
Include "Icons.def"
Include "MapBasic.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"

Include "Library\MI_ICONS_X64.def"
Include "Library\RibbonElements.def"


Define xProgram 		"Dynamic Demograpic Analyzer"
Define xProgramMenu		"DynamicDemograpicAnalyzer"
Define xVersion 		"1.2.0"
Define xYear			"2022"
Define xAddToMenuBar	FALSE

Define FILE_INI		GetFolderPath$(FOLDER_MI_PREFERENCE) & "DynamicDemograpicAnalyzer.ini"
Define FILE_DBG		ApplicationDirectory$() & "DynamicDemograpicAnalyzer.dbg"

'-------------------------------------
Include "Library\Types\T_LAYER_SETTINGS.def"
Include "Library\Types\T_LABEL_SETTINGS.def"
Include "Library\Types\T_GROUP_LAYER_INFO.def"
Include "Library\Types\T_LAYER_INFO.def"
Include "Library\CONFIGFILELib.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\FILELib.def"
Include "Library\GroupLayerLib.def"
Include "Library\ProgramInfo.def"
Include "Library\RIBBONLib.def"
Include "Library\TABLELib.def"

'-----------------------------------------------------------------------------------------
Declare Sub Main
Declare Sub MENUEnableDisableControls
Declare Sub EndProgram
Declare Sub EndHandler

Declare Sub MENUDestination2Origins
Declare Sub MENUOrigin2Destinations

Declare Sub MENUSelectTableDDOrig2Dest
Declare Sub MENUSelectTableDDBoundary

Declare Function MENUGetLayerPen(ByVal sType As String) As Pen
Declare Function MENUGetLayerBrush(ByVal sType As String) As Pen


Dim	msFileBoundary, msFileOrigin2Dest As String,
	msTabBoundary, msTabOrigin2Dest As String,
	mnDDAnalyzerIdx As Integer,
	mbSplitByHomeWork As Logical

'**********************************************************************************************''
'**   Created by Peter Horsbøll Møller, Precisely
'
'**********************************************************************************************''
Sub Main

Dim	sTabName, sGroupName As String,
	nCtrlIdx As Integer

OnError GoTo ErrorOccured

	'***Initializing ApplicationInfo
	Call PRGISetApplicationName(xProgram)
	Call PRGISetApplicationVersion(xVersion)
	Call PRGISetApplicationCopyrightYear(xYear)
	Call PRGISetApplicationDevelopedBy("Peter Horsbøll Møller")
	Call PRGISetDescription(PRGIGetApplicationName() & " helps you analyze the Precisely Demographic dataset to understand origin and destinations.")
	Call PRGISetApplicationImageUri(ApplicationDirectory$() & "DynamicDemographic_32.png")

	'***Enabling Debug if file exists
	Call DEBUGEnableByFile(FILE_DBG)

	'****************************************************************************************
	' C O N T R O L S   A D D E D   T O   M A P   T A B
	'****************************************************************************************
	'**Map Tab, Selection Group
	sTabName		= TAB_MAP
	sGroupName	= TAB_GROUP_MAP_SELECTION

	nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerD2O", "Destination to Origin", "", ControlType_ToolButton, sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Create a Destination to Origin Analysis.", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", ApplicationDirectory$() & "Dest2Origin_64.png")
		Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
		Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_ARROW, "")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUDestination2Origins")
	End If

	nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerO2D", "Origin to Destination", "", ControlType_ToolButton, sTabName, sGroupName)
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Create a Origin to Destination Analysis.", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", ApplicationDirectory$() & "Origin2Dest_64.png")
		Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
		Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_ARROW, "")
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUOrigin2Destinations")
	End If


	'****************************************************************************************
	' C O N T R O L S   A D D E D   T O   A P P L I C A T I O N   C O N T E X T   M E N U
	'****************************************************************************************
	'**Application Context Menu
	nCtrlIdx	= RBNToolContextMenuAddMenuItem("cmdSetBoundaryFile", "Set Boundary File...", "")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Select file with Boundaries.", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_OPENTABLE_16, MI_IMG_MAP_OPENTABLE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUSelectTableDDBoundary")
	End If

	nCtrlIdx	= RBNToolContextMenuAddMenuItem("cmdSetOrig2Dest", "Set Origin to Destination File...", "")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Select file with Origin to Destination.", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_OPENTABLE_16, MI_IMG_MAP_OPENTABLE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUSelectTableDDOrig2Dest")
	End If

	'**Reading Configuration File
	mbSplitByHomeWork	= IIf(CONFIGReadKey(FILE_INI, "CONFIGURATION", "SPLIT_HOMEWORK")="1", TRUE, FALSE)
	Call DebugPrint("Split result tables by HOME/WORK: " & IIf(mbSplitByHomeWork, "Yes", "No"))

	msFileBoundary = CONFIGReadKey(FILE_INI, "DD_TABFILES", "HEX_BOUNDARY")
'	Call DebugPrint("1. Boundary File: " & msFileBoundary)
	If msFileBoundary <> "" Then
		msFileBoundary		= FILEGetAbsolutePath(ApplicationDirectory$(), msFileBoundary)
	End If
	msFileOrigin2Dest	= CONFIGReadKey(FILE_INI, "DD_TABFILES", "ORIG2DEST")
'	Call DebugPrint("1. Origin2Dest File: " & msFileOrigin2Dest)
	If msFileOrigin2Dest <> "" Then
		msFileOrigin2Dest	= FILEGetAbsolutePath(ApplicationDirectory$(), msFileOrigin2Dest)
	End If

'	msTabBoundary		= PathToTableName$(msFileBoundary)
'	msTabOrigin2Dest	= PathToTableName$(msFileOrigin2Dest)

	Call DebugPrint("2. Boundary File: " & msFileBoundary)
	Call DebugPrint("2. Origin2Dest File: " & msFileOrigin2Dest)

	If msFileBoundary = "" Then
		Call MENUSelectTableDDBoundary
	End If
	If msFileOrigin2Dest = "" Then
		Call MENUSelectTableDDOrig2Dest
	End If

	Call MENUEnableDisableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Main")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUEnableDisableControls

OnError GoTo ErrorOccured

	If msFileBoundary = "" Or msFileOrigin2Dest = "" Then
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2O", FALSE)
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2D", FALSE)
	Else
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2O", TRUE)
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2D", TRUE)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUEnableDisableControls")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Precisely
'**   Ending MapBasic application
'****************************************
Sub EndProgram

OnError GoTo ErrorOccured

	End Program
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Precisely
'**   Ending MapBasic application
'****************************************
Sub EndHandler

OnError GoTo ErrorOccured

	'**Writing configurations to config file
	Call CONFIGWriteKey(FILE_INI, "CONFIGURATION", "SPLIT_HOMEWORK", IIf(mbSplitByHomeWork, "1", "0"))

	Call RBNEndHandler
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Precisely
'**   Ending MapBasic application
'****************************************
Sub MENUSelectTableDDOrig2Dest

Dim	sFile As String

OnError GoTo ErrorOccured

	sFile = FileOpenDlg(PathToDirectory$(msFileOrigin2Dest), PathToFileName$(msFileOrigin2Dest), "TAB", "Select Origin to Destination Dynamic Demographic file...")
	If sFile = "" Then
		Exit Sub
	End If

	msFileOrigin2Dest	= sFile
'	msTabOrigin2Dest	= PathToTableName$(msFileOrigin2Dest)

	Call MENUEnableDisableControls

	Call CONFIGWriteKey(FILE_INI, "DD_TABFILES", "ORIG2DEST", FILEGetRelativePath(ApplicationDirectory$(), msFileOrigin2Dest))

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUSelectTableDDOrig2Dest")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Precisely
'**   Ending MapBasic application
'****************************************
Sub MENUSelectTableDDBoundary

Dim	sFile As String

OnError GoTo ErrorOccured

	sFile = FileOpenDlg(PathToDirectory$(msFileBoundary), PathToFileName$(msFileBoundary), "TAB", "Select Dynamic Demographic Boundary file...")
	If sFile = "" Then
		Exit Sub
	End If

	msFileBoundary	= sFile
'	msTabBoundary	= PathToTableName$(msFileBoundary)

	Call MENUEnableDisableControls

	Call CONFIGWriteKey(FILE_INI, "DD_TABFILES", "HEX_BOUNDARY", FILEGetRelativePath(ApplicationDirectory$(), msFileBoundary))

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUSelectTableBoundary")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub MENUDestination2Origins

Dim	oPoint, oFrom As Object,
	fX, fY As Float,
	sFrom, sTo, sAreaID, sQueryName, sZoomLayer, sOriginAreaType As String,
	i, nMID, nGroupLayerID, nCounts(2) As Integer

OnError GoTo ErrorOccured

	sFrom	= "Destination"
	sTo		= "Origin"

	If FrontWindow() = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please use this tool in a map window!", Notify_Error, 2500)
		Exit Sub
	End If

	nMID = FrontWindow()
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please use this tool in a map window!", Notify_Error, 2500)
		Exit Sub
	End If

	msTabBoundary = TABGetNameFromTabFile(msFileBoundary)
	If msTabBoundary = "" Then
		If FileExists(msFileBoundary) Then
			Open Table msFileBoundary Interactive
		End If
		msTabBoundary = TABGetNameFromTabFile(msFileBoundary)
		If msTabBoundary = "" Then
			Exit Sub
		End If
	End If

	msTabOrigin2Dest = TABGetNameFromTabFile(msFileOrigin2Dest)
	If msTabOrigin2Dest = "" Then
		If FileExists(msFileOrigin2Dest) Then
			Open Table msFileOrigin2Dest Interactive
		End If
		msTabOrigin2Dest = TABGetNameFromTabFile(msFileOrigin2Dest)
		If msTabOrigin2Dest = "" Then
			Exit Sub
		End If
	End If

	Set CoordSys Table msTabBoundary
	fX	= CommandInfo(CMD_INFO_X)
	fY	= CommandInfo(CMD_INFO_Y)

	oPoint = CreatePoint(fX, fY)

	Select *
		From msTabBoundary
		Where oPoint Within OBJ
		Into __currDD NoSelect Hide

	If TableInfo(__currDD, TAB_INFO_NROWS) = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "No Dynamic Demographic Polygon found at that location!", Notify_Error, 2500)
		Close Table __currDD
		Exit Sub
	End If

	Call TABClose(sTo & "_DD")
	Call TABClose(sFrom & "s_DD")
	Call TABClose(sFrom & "s_Home_DD")
	Call TABClose(sFrom & "s_Work_DD")
	Call TABClose(sTo & "_2_" & sFrom & "s_DD")
	Call TABClose(sTo & "_2_" & sFrom & "s_Home_DD")
	Call TABClose(sTo & "_2_" & sFrom & "s_WORK_DD")

	Fetch First From __currDD
	sAreaID	= __currDD.Area_ID
	oFrom	= __currDD.OBJ
	Call DebugPrint(FormatNumber$(TableInfo(__currDD, TAB_INFO_NROWS)) & " " & sFrom & "(s) found. Using " & sAreaID)

	Close Table __currDD

	Select *
		From msTabBoundary
		Where Area_ID = sAreaID
		And OBJ
		Into sFrom & "_DD" NoSelect
	Call DebugPrint(FormatNumber$(TableInfo(sFrom & "_DD", TAB_INFO_NROWS)) & " " & sFrom & "(s) found using " & sAreaID)

	If TableInfo(sFrom & "_DD", TAB_INFO_NROWS) = 0 Then
		Close Table sFrom & "_DD"
		Call RBNNotificationShow(PRGIGetApplicationName(), "No Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 2500)
		Exit Sub
	End If

	Add Map
		Window nMID
		Layer sFrom & "_DD"
	Set Map
		Window nMID
		Layer sFrom & "_DD"
			Display Global
			Global Global Pen MENUGetLayerPen(sFrom) Global Brush MENUGetLayerBrush(sFrom)
			Alpha 127
	Call DebugPrint("1 layer has been configured.")

	If mbSplitByHomeWork Then
		For i = 1 To 2
			sOriginAreaType	= IIf(i = 1, "Home", "Work")
			sQueryName		= sTo & "s_" & sOriginAreaType & "_DD"

			'New Query using Join
			Select *
				From msTabBoundary As "b", msTabOrigin2Dest As "od"
				Where b.Area_ID = od.Origin_Area_ID
				And od.Origin_Area_Type = sOriginAreaType
				And od.Dest_Area_ID = sAreaID
				And OBJ
				Into sQueryName NoSelect
			nCounts(i)	= TableInfo(sQueryName, TAB_INFO_NROWS)
			Call DebugPrint(FormatNumber$(nCounts(i)) & " " & sTo & "(s) found for '" & sOriginAreaType & "'.")

			If nCounts(i) = 0 Then
				Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons '" & sOriginAreaType & "' found for Area_ID '" & sAreaID & "'!", Notify_Error, 2500)
				Call TABClose(sQueryName)
				Exit Sub
			Else
				Select q.*, ConnectObjects(Centroid(oFrom), Centroid(q.OBJ), TRUE) Object
					From sQueryName As "q"
					Into sFrom & "_2_" & sQueryName NoSelect
				Call DebugPrint(FormatNumber$(TableInfo(sFrom & "_2_" & sQueryName, TAB_INFO_NROWS)) & " " & sFrom & " to " & sTo & "(s) calculated for '" & sOriginAreaType & "'.")

				nGroupLayerID = GLYRGetGroupLayerID(nMID, 0, sOriginAreaType, TRUE)
				If nGroupLayerID < 0 Then
					Call DebugPrint("Creating NEW group layer '" & sOriginAreaType & "'")
					Add Map
						Window nMID
						GroupLayer (sOriginAreaType, sFrom & "_2_" & sQueryName, sQueryName) Position 2
				Else
					Call DebugPrint("Using EXISTING group layer '" & sOriginAreaType & "'")
					Add Map
						Window nMID
						Layer sFrom & "_2_" & sQueryName, sQueryName
						DestGrouplayer sOriginAreaType
				End If

				Set Map
					Window nMID
					Layer sFrom & "_2_" & sQueryName
						Display Global
						Global Line (3,3,8388608)
					Layer sQueryName
						Display Global
						Global Pen MENUGetLayerPen(sTo & "s") Global Brush MENUGetLayerBrush(sTo & "s")
						Alpha 127
				Call DebugPrint("2 layers have been configured.")
			End If
		Next

		sZoomLayer	= sTo & "s_" & IIf(nCounts(1) > nCounts(2), "Home", "Work") & "_DD"
	Else
		sQueryName		= sTo & "s_DD"

		'New Query using Join
		Select *
			From msTabBoundary As "b", msTabOrigin2Dest As "od"
			Where b.Area_ID = od.Origin_Area_ID
			And od.Dest_Area_ID = sAreaID
			And OBJ
			Into sQueryName NoSelect
		nCounts(1)	= TableInfo(sQueryName, TAB_INFO_NROWS)
		Call DebugPrint(FormatNumber$(nCounts(1)) & " " & sTo & "(s) found.")

		If nCounts(1) = 0 Then
			Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 2500)
			Call TABClose(sQueryName)
			Exit Sub
		Else
			Select q.*, ConnectObjects(Centroid(oFrom), Centroid(q.OBJ), TRUE) Object
				From sQueryName As "q"
				Into sFrom & "_2_" & sQueryName NoSelect
			Call DebugPrint(FormatNumber$(TableInfo(sFrom & "_2_" & sQueryName, TAB_INFO_NROWS)) & " " & sFrom & " to " & sTo & "(s) calculated.")

			sZoomLayer	= sFrom & "_2_" & sQueryName

			Add Map
				Window nMID
				Layer sFrom & "_2_" & sQueryName
					, sQueryName

			Set Map
				Window nMID
				Layer sFrom & "_2_" & sQueryName
					Display Global
					Global Line (3,3,8388608)
				Layer sQueryName
					Display Global
					Global Global Pen MENUGetLayerPen(sTo & "s") Global Brush MENUGetLayerBrush(sTo & "s")
					Alpha 127
			Call DebugPrint("2 layers have been configured.")
		End If
	End If

	Call DebugPrint("Zooming to extent of layer '" & sZoomLayer & "'")
	Set Window nMID Enhanced On
	Set Map
		Window nMID
		Zoom Entire Layer sZoomLayer

	If mbSplitByHomeWork Then
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " Home " & sTo & "s and "
					& FormatNumber$(nCounts(2)) & " Work " & sTo & "s"
				, Notify_Info, 10000)
	Else
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " " & sTo & "s"
				, Notify_Info, 10000)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUDestination2Origins")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub MENUOrigin2Destinations

Dim	oPoint, oFrom As Object,
	fX, fY As Float,
	sFrom, sTo, sAreaID, sQueryName, sZoomLayer, sOriginAreaType As String,
	i, nMID, nGroupLayerID, nCounts(2) As Integer

OnError GoTo ErrorOccured

	sFrom	= "Origin"
	sTo		= "Destination"

	If FrontWindow() = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please use this tool in a map window!", Notify_Error, 2500)
		Exit Sub
	End If

	nMID = FrontWindow()
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please use this tool in a map window!", Notify_Error, 2500)
		Exit Sub
	End If

	msTabBoundary = TABGetNameFromTabFile(msFileBoundary)
	If msTabBoundary = "" Then
		If FileExists(msFileBoundary) Then
			Open Table msFileBoundary Interactive
		End If
		msTabBoundary = TABGetNameFromTabFile(msFileBoundary)
		If msTabBoundary = "" Then
			Exit Sub
		End If
	End If

	msTabOrigin2Dest = TABGetNameFromTabFile(msFileOrigin2Dest)
	If msTabOrigin2Dest = "" Then
		If FileExists(msFileOrigin2Dest) Then
			Open Table msFileOrigin2Dest Interactive
		End If
		msTabOrigin2Dest = TABGetNameFromTabFile(msFileOrigin2Dest)
		If msTabOrigin2Dest = "" Then
			Exit Sub
		End If
	End If

	Set CoordSys Table msTabBoundary
	fX	= CommandInfo(CMD_INFO_X)
	fY	= CommandInfo(CMD_INFO_Y)

	oPoint = CreatePoint(fX, fY)

	Select *
		From msTabBoundary
		Where oPoint Within OBJ
		Into __currDD NoSelect Hide

	If TableInfo(__currDD, TAB_INFO_NROWS) = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "No Dynamic Demographic Polygon found at that location!", Notify_Error, 2500)
		Close Table __currDD
		Exit Sub
	End If

	Call TABClose(sTo & "_DD")
	Call TABClose(sFrom & "s_DD")
	Call TABClose(sFrom & "s_Home_DD")
	Call TABClose(sFrom & "s_Work_DD")
	Call TABClose(sTo & "_2_" & sFrom & "s_DD")
	Call TABClose(sTo & "_2_" & sFrom & "s_Home_DD")
	Call TABClose(sTo & "_2_" & sFrom & "s_WORK_DD")

	Fetch First From __currDD
	sAreaID	= __currDD.Area_ID
	oFrom	= __currDD.OBJ
	Call DebugPrint(FormatNumber$(TableInfo(__currDD, TAB_INFO_NROWS)) & " " & sFrom & "(s) found. Using " & sAreaID)

	Close Table __currDD

	Select *
		From msTabBoundary
		Where Area_ID = sAreaID
		And OBJ
		Into sFrom & "_DD" NoSelect
	Call DebugPrint(FormatNumber$(TableInfo(sFrom & "_DD", TAB_INFO_NROWS)) & " " & sFrom & "(s) found using " & sAreaID)

	If TableInfo(sFrom & "_DD", TAB_INFO_NROWS) = 0 Then
		Close Table sFrom & "_DD"
		Call RBNNotificationShow(PRGIGetApplicationName(), "No Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 2500)
		Exit Sub
	End If

	Add Map
		Window nMID
		Layer sFrom & "_DD"
	Set Map
		Window nMID
		Layer sFrom & "_DD"
			Display Global
			Global Global Pen MENUGetLayerPen(sFrom) Global Brush MENUGetLayerBrush(sFrom)
			Alpha 127
	Call DebugPrint("1 layer has been configured.")

	If mbSplitByHomeWork Then
		For i = 1 To 2
			sOriginAreaType	= IIf(i = 1, "Home", "Work")
			sQueryName		= sTo & "s_" & sOriginAreaType & "_DD"

			'New Query using Join
			Select *
				From msTabBoundary As "b", msTabOrigin2Dest As "od"
				Where b.Area_ID = od.Dest_Area_ID
				And od.Origin_Area_Type = sOriginAreaType
				And od.Origin_Area_ID = sAreaID
				And OBJ
				Into sQueryName NoSelect
			nCounts(i)	= TableInfo(sQueryName, TAB_INFO_NROWS)
			Call DebugPrint(FormatNumber$(nCounts(i)) & " " & sTo & "(s) found for '" & sOriginAreaType & "'.")

			If nCounts(i) = 0 Then
				Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons '" & sOriginAreaType & "' found for Area_ID '" & sAreaID & "'!", Notify_Error, 2500)
				Call TABClose(sQueryName)
				Exit Sub
			Else
				Select q.*, ConnectObjects(Centroid(oFrom), Centroid(q.OBJ), TRUE) Object
					From sQueryName As "q"
					Into sFrom & "_2_" & sQueryName NoSelect
				Call DebugPrint(FormatNumber$(TableInfo(sFrom & "_2_" & sQueryName, TAB_INFO_NROWS)) & " " & sFrom & " to " & sTo & "(s) calculated for '" & sOriginAreaType & "'.")

				nGroupLayerID = GLYRGetGroupLayerID(nMID, 0, sOriginAreaType, TRUE)
				If nGroupLayerID < 0 Then
					Call DebugPrint("Creating NEW group layer '" & sOriginAreaType & "'")
					Add Map
						Window nMID
						GroupLayer (sOriginAreaType, sFrom & "_2_" & sQueryName, sQueryName) Position 2
				Else
					Call DebugPrint("Using EXISTING group layer '" & sOriginAreaType & "'")
					Add Map
						Window nMID
						Layer sFrom & "_2_" & sQueryName, sQueryName
						DestGrouplayer sOriginAreaType
				End If

				Set Map
					Window nMID
					Layer sFrom & "_2_" & sQueryName
						Display Global
						Global Line (3,3,8388608)
					Layer sQueryName
						Display Global
						Global Pen MENUGetLayerPen(sTo & "s") Global Brush MENUGetLayerBrush(sTo & "s")
						Alpha 127
				Call DebugPrint("2 layers have been configured.")
			End If
		Next

		sZoomLayer	= sTo & "s_" & IIf(nCounts(1) > nCounts(2), "Home", "Work") & "_DD"
	Else
		sQueryName		= sTo & "s_DD"

		'New Query using Join
		Select *
			From msTabBoundary As "b", msTabOrigin2Dest As "od"
			Where b.Area_ID = od.Dest_Area_ID
			And od.Origin_Area_ID = sAreaID
			And OBJ
			Into sQueryName NoSelect
		nCounts(1)	= TableInfo(sQueryName, TAB_INFO_NROWS)
		Call DebugPrint(FormatNumber$(nCounts(1)) & " " & sTo & "(s) found.")

		If nCounts(1) = 0 Then
			Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 2500)
			Call TABClose(sQueryName)
			Exit Sub
		Else
			Select q.*, ConnectObjects(Centroid(oFrom), Centroid(q.OBJ), TRUE) Object
				From sQueryName As "q"
				Into sFrom & "_2_" & sQueryName NoSelect
			Call DebugPrint(FormatNumber$(TableInfo(sFrom & "_2_" & sQueryName, TAB_INFO_NROWS)) & " " & sFrom & " to " & sTo & "(s) calculated.")

			sZoomLayer	= sFrom & "_2_" & sQueryName

			Add Map
				Window nMID
				Layer sFrom & "_2_" & sQueryName
					, sQueryName

			Set Map
				Window nMID
				Layer sFrom & "_2_" & sQueryName
					Display Global
					Global Line (3,3,8388608)
				Layer sQueryName
					Display Global
					Global Global Pen MENUGetLayerPen(sTo & "s") Global Brush MENUGetLayerBrush(sTo & "s")
					Alpha 127
			Call DebugPrint("2 layers have been configured.")
		End If
	End If

	Call DebugPrint("Zooming to extent of layer '" & sZoomLayer & "'")
	Set Window nMID Enhanced On
	Set Map
		Window nMID
		Zoom Entire Layer sZoomLayer

	If mbSplitByHomeWork Then
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " Home " & sTo & "s and "
					& FormatNumber$(nCounts(2)) & " Work " & sTo & "s"
				, Notify_Info, 10000)
	Else
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " " & sTo & "s"
				, Notify_Info, 10000)
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUOrigin2Destinations")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUGetLayerPen(ByVal sType As String) As Pen

OnError GoTo ErrorOccured

MENUGetLayerPen = MakePen(2,1,45056)

	Do Case sType
		Case "Origin"
			MENUGetLayerPen = MakePen(2,1,16711680)
		Case "Origins"
			MENUGetLayerPen = MakePen(2,1,16711680)
		Case "Destination"
			MENUGetLayerPen = MakePen(2,1,45056)
		Case "Destinations"
			MENUGetLayerPen = MakePen(2,1,45056)
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUGetLayerPen")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUGetLayerBrush(ByVal sType As String) As Pen

OnError GoTo ErrorOccured

MENUGetLayerBrush = MakePen(2,1,45056)

	Do Case sType
		Case "Origin"
			MENUGetLayerBrush = MakeBrush(2,16711680,16777215)
		Case "Origins"
			MENUGetLayerBrush = MakeBrush(2,16711680,16777215)
		Case "Destination"
			MENUGetLayerBrush = MakeBrush(2,45056,45056)
		Case "Destinations"
			MENUGetLayerBrush = MakeBrush(2,45056,45056)
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUGetLayerBrush")
	Call ERRShow()

End Function