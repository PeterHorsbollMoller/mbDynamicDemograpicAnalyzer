'*******************************************************************************
'**   Created by Peter Horsbøll Møller, Precisely
'** 	Program:
'** 	Modul:
'**
'*******************************************************************************
'29-06-2022 09:06:56	v1.6.0:
'					- Fixed issue: Configuration dialog shows an error when no Data Type has been selected
'					- Fixed issue: Data Loading dialog shows error when no Main Folder has been specified
'					- Added option to not use Data Types in the analysis, will use Orig to Destination table instead
'					- Added support for data type Consumer Styles
'					- Added option to perform an analysis for multiple boundaries resulting in an aggregated view
'					- The analysis tables are now native tables stored in the temp folder, no longer query tables
'					- The analysis tables are opened with persist set to off meaning the will not be saved to a workspace
'04-08-2022 09:28:17	v1.6.5:
'					- Optimized querying, should cut the time by 90% or more
'					- Improved data loading to cut down Char column width if they are 10 characters or more wider than necessary
'					- Added print statements to the data loading to give some feedback to user on loading performance
'04-08-2022 11:05:39	v1.6.6
'					- Fixed issue in queries where records without spatial object also where included
'					- Control for analysis using Selection is now disabled until a selection has been made from the boundary tables
'					- Cursor for the two tools has been changed to a big crosshair
'05-08-2022 13:18:43	v1.6.7
'					- Issue selecting other boundary types in Configuration dialog fixed
'09-08-2022 08:20:51	v1.6.8
'					- Fixed issue in ConfigDlg when using OA boundaries
'					- Added a check to ensure the folder exists before looking for sub folders
'					- Disabling 'Save As' when no result exists
'					- Added somemore details to the Print messages for Data Loading
'					- Added control to run Origins to Destinations using a selection
'					- New icons for 'Destinations to Origins' and 'Origins to Destinations'
'					- Added a column with the calculated distance between the start and end boundary centroid, rounded to 10 meters for the line table result
'						- distance unit is taken for the current System Preference
'					- Restructured the code for the analysis tools to use the same code for the analysis (see MENUFromToAnalysis)
'					- Restructured Save As to use Rename Table and split it into the UI and a dedicated function for renaming
'					- When renaming the tool now checks if the specified project already exists and warns the user
'						- Existing project will be closed and overwritten
'						- Table open under the same name will be closed
'31/08/2022 08.59.39	v1.6.9
'					- Fixed an error where numeric AREA_IDs where mistreating in the query
'06/09/2022 14.22.54	v1.7.0
'					- Fixed issue where the tool crashed when no datatype was selected
'					- Fixed an issue with preselecting the current data type in the COnfig dialog
'14/12/2022 09.12.51	v1.8.0
'					- Support for loading Uber H3 Hex Level 11 boundary files
'					- Improved column type detection when loading data files
'					- Support for  handling some boundaries that don't support Orig2Dest
'					- Data Loading now looks for Boundary Files, not just the folder (support for Hex 11 in same folder as Hex 9)
'					- Data Loading now support preparing Seasonality for Time Series - transposing the data
'26/01/2023 14.48.45	v1.8.1
'					- Validating Config dialog
'					- Fixing finding files
'28/02/2023 09.25.24	v1.8.2
'					- Lists in dialogs with base boundary types now only list boundary types with existing files (txt or tab)
'					- DataLoad: Fixed potential issue with seasonality having empty columns (converting Char to Float)
'					- DataLoad: Added checks for support for and existense of 'origing to destinaltion' files
'					- DataLoad: Added checks for existense of 'seasonality' files
'					- DDFGetOrigin2DestFileName no longer takes a datatype parameters
'					- Fixed issue where these function didn't return a file name when multiple files where found: DDFGetBoundaryFileName & DDFGetOrigin2DestFileName
'27/04/2023 13.40.32	v.1.8.5
'					- Newest Libray Modules
'					- Release Build
'03/05/2023 11.17.40	v.1.8.6
'					- Added Index on data files during data load
'16/05/2023 13.40.18	v1.9.0
'					- Tab for DD Analyzer
'22/05/2023 14:00:37	v.1.9.1
'					- Fixing issue with Origins to Destinations - was doing Destinations to Origins
'03-01-2024 07:05:24	v1.9.2
'					- Added Occupation as a DataType as it replaces Profession in AUS from v2023-12
'*******************************************************************************

'-------------------------------------
Include "Enums.def"
Include "Icons.def"
Include "MapBasic.def"
Include "Menu.def"
'**default constants...
Include "Library\Defaults.def"

Include "Library\MI_ICONS_X64.def"
Include "Library\RibbonElements.def"

Define xProgram 		"Dynamic Demograpic Analyzer"
Define xProgramMenu		"DynamicDemograpicAnalyzer"
Define xVersion 		"1.9.2"
Define xYear			"2024"
Define xAddToMenuBar	FALSE

Define FILE_INI		GetFolderPath$(FOLDER_MI_PREFERENCE) & "DynamicDemograpicAnalyzer.ini"
Define FILE_DBG		ApplicationDirectory$() & "DynamicDemograpicAnalyzer.dbg"
Define FILE_HLP		ApplicationDirectory$() & "DynamicDemograpicAnalyzer.pdf"

'-------------------------------------
Include "Library\Types\T_LAYER_SETTINGS.def"
Include "Library\Types\T_LABEL_SETTINGS.def"
Include "Library\Types\T_GROUP_LAYER_INFO.def"
Include "Library\Types\T_LAYER_INFO.def"
Include "Library\ARRAYLib.def"
Include "Library\COLUMNLib.def"
Include "Library\CONFIGFILELib.def"
Include "Library\DEBUGLib.def"
Include "Library\ERRORLib.def"
Include "Library\FILELib.def"
Include "Library\GroupLayerLib.def"
Include "Library\ProgramInfo.def"
Include "Library\RIBBONLib.def"
Include "Library\STRINGLib.def"
Include "Library\TABLELib.def"

Include "DDFunctions.def"
Include "DDConfigDlg.def"
Include "DDDataLoading.def"

'-----------------------------------------------------------------------------------------
Declare Sub Main
Declare Sub MENUEnableDisableControls
Declare Sub EndProgram
Declare Sub EndHandler
Declare Sub SelChangedHandler

Declare Sub MENUConfiguration
Declare Sub MENUWriteConfigFile
Declare Sub MENUReadConfigFile
Declare Sub MENUSaveAs
Declare Function MENURenameAnalysisResult(	  ByVal sPath As String
									, ByVal sName As String
									) As Logical

Declare Function MENUCreateFromQueryTable(	  ByVal oPoint As Object			'Location to Query
									, ByVal sTable As String			'Table with DD Boundaries to query
									, ByVal sColumnAreaID As String	'Column with Area_ID
									, ByVal sQueryName As String		'Name of resulting query
									) As String					'Returns the Area ID
Declare Function MENUCreateFromQueryTableFromTab(	  ByVal sSelectionTable As String	'Table with list of Area_IDs
										, ByVal sTable As String			'Table with DD Boundaries to query
										, ByVal sColumnAreaID As String	'Column with Area_ID
										, ByVal sQueryName As String		'Name of resulting query
										) As String					'Returns the Area ID

Declare Function MENUCreateToQueryTables( ByVal oFromPolygon As Object		'Polygon of the starting position
								, ByVal sAreaID As String			'Area_ID to search for
								, ByVal sOriginAreaType As String		'Origin AreaType to search use
								, ByVal sTabBoundary As String		'Table with DD Boundaries to query
								, ByVal sColB_AreaID As String		'Column with Area_ID
								, ByVal sTabOrigin2Dest As String		'Table with Origin 2 Destinations to query
								, ByVal sColOD_AreaID As String		'Column with Area_ID - of the start point
								, ByVal sColOD_AreaIDStart As String	'Column with Area_ID - of the end point
								, ByVal sColOD_OriginAreaType As String	'Column with Origin_Area_Type
								, ByVal sQueryNameArea As String		'Name of resulting query with polygons
								, ByVal sQueryNameLine As String		'Name of resulting query with lines
								) As Integer						'Number of Rows Selected, 0 if none were found
Declare Function MENUCreateToQueryTablesFromTab( ByVal sSelectionTable As String		'Table with list of Area_IDs
										, ByVal oFromPolygon As Object		'Polygon of the starting position
										, ByVal sAreaID As String			'Area_ID to search for
										, ByVal sOriginAreaType As String		'Origin AreaType to search use
										, ByVal sTabBoundary As String		'Table with DD Boundaries to query
										, ByVal sColB_AreaID As String		'Column with Area_ID
										, ByVal sTabOrigin2Dest As String		'Table with Origin 2 Destinations to query
										, ByVal sColOD_AreaID As String		'Column with Area_ID - of the start point
										, ByVal sColOD_AreaIDStart As String	'Column with Area_ID - of the end point
										, ByVal sColOD_OriginAreaType As String	'Column with Origin_Area_Type
										, ByVal sQueryNameArea As String		'Name of resulting query with polygons
										, ByVal sQueryNameLine As String		'Name of resulting query with lines
										) As Integer						'Number of Rows Selected, 0 if none were found

Declare Sub MENUAddFromQueryTablesToMap(  ByVal nMID As Integer
								, ByVal sQueryName As String
								, ByVal sToFromType As String)
Declare Sub MENUAddToQueryTablesToMap(	  ByVal nMID As Integer
								, ByVal sQueryNameArea As String
								, ByVal sQueryNameLine As String
								, ByVal sToFromType As String
								, ByVal sOriginAreaType As String)

Declare Function MENUOpenDDInputTables() As Logical

Declare Sub MENUDestination2OriginsTool
Declare Sub MENUOrigin2DestinationsTool
Declare Function MENUFromToAnalysis( ByVal sFrom As String
							, ByVal sTo As String
							, ByVal oPoint As Object
							, ByVal nMID As Integer
							) As Logical

Declare Sub MENUDestination2OriginsFromSel
Declare Sub MENUOrigin2DestinationsFromSel

Declare Function MENUGetLayerPen(ByVal sType As String) As Pen
Declare Function MENUGetLayerBrush(ByVal sType As String) As Pen

Type T_DD_RESULT
	sQueryTable 		As String
	sToFromType 		As String
	sOriginAreaType	As String
End Type

Dim	msTabBoundary, msTabOrigin2Dest, marrQueryNames(), marrQueryTypes() As String,
	msTempFolder As String,
	mtarrResults(0) As T_DD_RESULT
'Dim	marrQueryTypes() As String

'**********************************************************************************************''
'**   Created by Peter Horsbøll Møller, Precisely
'
'**********************************************************************************************''
Sub Main

Dim	sTabName, sGroupName, sCaption, sFile As String,
	nCtrlIdx As Integer

OnError GoTo ErrorOccured

	'***Initializing ApplicationInfo
	Call PRGISetApplicationName(xProgram)
	Call PRGISetApplicationVersion(xVersion)
	Call PRGISetApplicationCopyrightYear(xYear)
	Call PRGISetApplicationDevelopedBy("Peter Horsbøll Møller")
	Call PRGISetDescription(PRGIGetApplicationName() & " helps you analyze the Precisely Demographic dataset to understand origin and destinations.")
	Call PRGISetApplicationImageUri(ApplicationDirectory$() & "DynamicDemographic_32.png")
	Call PRGISetApplicationHelpFile(FILE_HLP)

	'***Enabling Debug if file exists
	Call DEBUGEnableByFile(FILE_DBG)

	'****************************************************************************************
	' C O N T R O L S   A D D E D   T O   M A P   T A B
	'****************************************************************************************
	'**Map Tab, Selection Group
	sTabName	= "tabDDAnalyzer"
	sCaption	= "Dynamic Demographic"
	nCtrlIdx	= RBNAddTab(sTabName, sCaption, "")
	If nCtrlIdx = 0 then
		Note "Error: Tab '" & sCaption & "' wasn't added"
		Exit Sub
	End If

	'*** T A B   G R O U P   F O R   F I L E S
	sGroupName	= "grpDDAnalyzerFiles"
	sCaption		= "Files"
	nCtrlIdx		= RBNTabAddGroup(sGroupName, sCaption, sTabName)
	If nCtrlIdx = 0 then
		Note "Error: Group '" & sCaption & "' wasn't added"
	Else
		nCtrlIdx = RBNGroupAddControl("cmdSaveAs", "Save Result as", "", ControlType_Button, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Save a Origin to Destination Analysis into tables.", "Create an analysis to use this function")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", ApplicationDirectory$() & "DDSaveAs.png")
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUSaveAs")
		End If

		nCtrlIdx = RBNGroupAddControl("cmdConfiguration", "Configuration...", "", ControlType_Button, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Open configuration dialog for Dynamic Demographic Analyzer", "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_TLS_CTLGBROWSEROPTS_16, MI_IMG_TLS_CTLGBROWSEROPTS_32)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUConfiguration")
		End If
		nCtrlIdx = RBNGroupAddControl("cmdDataLoading", "Data Loading...", "", ControlType_Button, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Convert Dynamic Demographic Text file into Extended Tab Files.", "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_OPENTABLE_16, MI_IMG_MAP_OPENTABLE_32)
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "DDDataLoading")
		End If
	End If

	'*** T A B   G R O U P   F O R   S I N G L E   I N P U T S
	sGroupName	= "grpDDAnalyzerTools"
	sCaption		= "Tools"
	nCtrlIdx		= RBNTabAddGroup(sGroupName, sCaption, sTabName)
	If nCtrlIdx = 0 then
		Note "Error: Group '" & sCaption & "' wasn't added"
	Else
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerSelector", "Select", "", ControlType_ToolButton, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Select one or more map records", "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_SELECT_16, MI_IMG_MAP_SELECT_32)
'			Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
'			Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_LRG_CROSSHAIR, "")
			Call RBNControlSetCmdIDIdx(nCtrlIdx, M_QUERY_SELECT)
		End If
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerZoomIn", "Zoom In", "", ControlType_ToolButton, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Zoom in on a map at cursor location", "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_ZOOMIN_16, MI_IMG_MAP_ZOOMIN_32)
'			Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
'			Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_LRG_CROSSHAIR, "")
			Call RBNControlSetCmdIDIdx(nCtrlIdx, M_TOOLS_EXPAND)
		End If
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerZoomOut", "Zoom Out", "", ControlType_ToolButton, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Zoom out on a map at cursor location", "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_ZOOMOUT_16, MI_IMG_MAP_ZOOMOUT_32)
'			Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
'			Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_LRG_CROSSHAIR, "")
			Call RBNControlSetCmdIDIdx(nCtrlIdx, M_TOOLS_SHRINK)
		End If
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerPan", "Pan", "", ControlType_ToolButton, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Recenter a map by grabbing and moving in a direction", "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_PAN_16, MI_IMG_MAP_PAN_32)
'			Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
'			Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_LRG_CROSSHAIR, "")
			Call RBNControlSetCmdIDIdx(nCtrlIdx, M_TOOLS_RECENTER)
		End If
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerInfo", "Info", "", ControlType_ToolButton, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Display tabular information about map objects", "")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, MI_IMG_MAP_INFOTOOL_16, MI_IMG_MAP_INFOTOOL_32)
'			Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
'			Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_LRG_CROSSHAIR, "")
			Call RBNControlSetCmdIDIdx(nCtrlIdx, M_TOOLS_PNT_QUERY)
		End If
	End If

	'*** T A B   G R O U P   F O R   S I N G L E   I N P U T S
	sGroupName	= "grpDDAnalyzerSingle"
	sCaption		= "Single"
	nCtrlIdx		= RBNTabAddGroup(sGroupName, sCaption, sTabName)
	If nCtrlIdx = 0 then
		Note "Error: Group '" & sCaption & "' wasn't added"
	Else
'		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerD2OTool", "Destination to Origins", "", ControlType_ToolButton, sTabName, sGroupName)
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerD2OTool", "Show me Origins", "", ControlType_ToolButton, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Click and create a Destination to Origins Analysis.", "Setup the analysis using the COnfiguration dialog to use this tool.")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", ApplicationDirectory$() & "Dest2Origin_64.png")
			Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
			Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_LRG_CROSSHAIR, "")
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUDestination2OriginsTool")
		End If
'		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerO2DTool", "Origin to Destinations", "", ControlType_ToolButton, sTabName, sGroupName)
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerO2DTool", "Show me Destinations", "", ControlType_ToolButton, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Click and create a Origin to Destinations Analysis.", "Setup the analysis using the COnfiguration dialog to use this tool.")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", ApplicationDirectory$() & "Origin2Dest_64.png")
			Call RBNControlSetDrawModeIdx(nCtrlIdx, DM_CUSTOM_POINT)
			Call RBNControlSetMICursorIdx(nCtrlIdx, MI_CURSOR_LRG_CROSSHAIR, "")
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUOrigin2DestinationsTool")
		End If
	End If

	'*** T A B   G R O U P   F O R   M U L T I P L E   I N P U T S
	sGroupName	= "grpDDAnalyzerMultiple"
	sCaption		= "Mutiple"
	nCtrlIdx		= RBNTabAddGroup(sGroupName, sCaption, sTabName)
	If nCtrlIdx = 0 then
		Note "Error: Group '" & sCaption & "' wasn't added"
	Else
'		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerD2OSel", "Destinations to Origins", "", ControlType_Button, sTabName, sGroupName)
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerD2OSel", "Show me Origins", "", ControlType_Button, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Create a Destinations to Origins Analysis using the selection.", "Please select the destination areas for the analysis from the base boundary table!")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", ApplicationDirectory$() & "Dest2OriginSel_64.png")
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUDestination2OriginsFromSel")
		End If

'		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerO2DSel", "Origins to Destinations", "", ControlType_Button, sTabName, sGroupName)
		nCtrlIdx = RBNGroupAddControl("cmdDDAnalyzerO2DSel", "Show me Destinations", "", ControlType_Button, sTabName, sGroupName)
		If nCtrlIdx > 0 Then
			Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Create a Origins to Destinations Analysis using the selection.", "Please select the origin areas for the analysis from the base boundary table!")
			Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_LARGE, "", ApplicationDirectory$() & "Origin2DestSel_64.png")
			Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUOrigin2DestinationsFromSel")
		End If
	End If

	'****************************************************************************************
	' C O N T R O L S   A D D E D   T O   A P P L I C A T I O N   C O N T E X T   M E N U
	'****************************************************************************************
	'**Application Context Menu
	nCtrlIdx	= RBNToolContextMenuAddMenuItem("cmdConfigurationCntx", "Configuration...", "")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Open configuration dialog for Dynamic Demographic Analyzer", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_TLS_CTLGBROWSEROPTS_16, MI_IMG_TLS_CTLGBROWSEROPTS_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "MENUConfiguration")
	End If
	nCtrlIdx	= RBNToolContextMenuAddMenuItem("cmdDataLoadingCntx", "Data Loading...", "")
	If nCtrlIdx > 0 Then
		Call RBNControlSetToolTipIdx(nCtrlIdx, PRGIGetApplicationName(), "Convert Dynamic Demographic Text file into Extended Tab Files.", "")
		Call RBNControlSetIconsIdx(nCtrlIdx, CONTROL_SIZE_SMALL, MI_IMG_MAP_OPENTABLE_16, MI_IMG_MAP_OPENTABLE_32)
		Call RBNControlSetCustomMBXHandlerIdx(nCtrlIdx, "DDDataLoading")
	End If

	Call MENUReadConfigFile

	Call MENUEnableDisableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "Main")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUEnableDisableControls

Dim	sFile As String

OnError GoTo ErrorOccured

	If DDCGetBoundaryFile() = "" Or DDCGetOrigin2DestFile() = "" Then
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2OTool", FALSE)
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2OSel", FALSE)
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2DTool", FALSE)
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2DSel", FALSE)
		Call RBNGroupEnableControls("", "", "cmdSaveAs", FALSE)
	Else
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2OTool", TRUE)
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2OSel", TRUE)
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2DTool", TRUE)
		Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2DSel", TRUE)
		Call RBNGroupEnableControls("", "", "cmdSaveAs", TRUE)

		'**Disabling tools using selection based on current selection
		If SelectionInfo(SEL_INFO_NROWS) = 0 Then
			Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2OSel", FALSE)
			Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2DSel", FALSE)
		Else
			sFile = DDFGetBaseBoundaryFileName(DDCGetDDMainDataFolder(), DDCGetBoundaryType(), "TAB")
			If sFile = "" Then
				Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2OSel", FALSE)
				Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2DSel", FALSE)
			ElseIf Not SelectionInfo(SEL_INFO_TABLENAME) = PathToTableName$(sFile) Then
				Call RBNGroupEnableControls("", "", "cmdDDAnalyzerD2OSel", FALSE)
				Call RBNGroupEnableControls("", "", "cmdDDAnalyzerO2DSel", FALSE)
			End If
		End If

		'**Disabling SaveAs based on existence of result or not
		If Ubound(mtarrResults) = 0 Then
			Call RBNGroupEnableControls("", "", "cmdSaveAs", FALSE)
		End If
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUEnableDisableControls")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Precisely
'**   Ending MapBasic application
'****************************************
Sub EndProgram

OnError GoTo ErrorOccured

	End Program
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'****************************************
'**   Created by Peter Horsbøll Møller, Precisely
'**   Ending MapBasic application
'****************************************
Sub EndHandler

OnError GoTo ErrorOccured

	Call RBNEndHandler
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "EndProgram")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub SelChangedHandler

OnError GoTo ErrorOccured

	Call MENUEnableDisableControls
	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "SelChangedHandler")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUConfiguration

OnError GoTo ErrorOccured

	If DDConfigDlg() Then
		Call MENUWriteConfigFile
	End If

	Call MENUEnableDisableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUConfiguration")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUWriteConfigFile

Dim	nName As Integer,
	tLyr As T_LAYER_SETTINGS,
	tLbl As T_LABEL_SETTINGS

OnError GoTo ErrorOccured

	'**Writing configurations to config file
	Call CONFIGWriteKey(FILE_INI, "DD_TABFILES", "HEX_BOUNDARY", FILEGetRelativePath(ApplicationDirectory$(), DDCGetBoundaryFile()))
	Call CONFIGWriteKey(FILE_INI, "DD_TABFILES", "ORIG2DEST", FILEGetRelativePath(ApplicationDirectory$(), DDCGetOrigin2DestFile()))

	Call CONFIGWriteKey(FILE_INI, "DD_TABFILES", "DATATYPE", DDCGetDataType())
	Call CONFIGWriteKey(FILE_INI, "DD_TABFILES", "DAYPART", DDCGetDayPart())
	Call CONFIGWriteKey(FILE_INI, "DD_TABFILES", "BOUNDARYTYPE", DDCGetBoundaryType())

	Call CONFIGWriteKey(FILE_INI, "DD_FOLDERS", "MAINDATA", FILEGetRelativePath(ApplicationDirectory$(), DDCGetDDMainDataFolder()))

	Call CONFIGWriteKey(FILE_INI, "CONFIGURATION", "SPLIT_HOMEWORK", IIf(DDCSplitByWorkerHome(), "1", "0"))

'	Call DEBUGPrint("Writing Layer Settings...")
	For nName = 1 To Ubound(marrQueryNames)
'		Call DEBUGPrint(nName & " " & marrQueryNames(nName) & "...")
		If DDCGetLayerSettings(marrQueryNames(nName), marrQueryTypes(nName), tLyr, tLbl) Then
'			Call DEBUGPrint("Write Config " & marrQueryNames(nName) & ": Brush Overrides: " & Ubound(tLyr.brsOverride))
			Call CONFIGWriteKey(FILE_INI, "LAYERSETTINGS", marrQueryNames(nName), tlsToString(tLyr))
			Call CONFIGWriteKey(FILE_INI, "LABELSETTINGS", marrQueryNames(nName), tlbsToString(tLbl))
		End If
	Next

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUWriteConfigFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUReadConfigFile

Dim	sName, sType, sTo, sFrom, sFile, sSetting As String,
	nName, i As Integer,
	tLyr As T_LAYER_SETTINGS,
	tLbl AS T_LABEL_SETTINGS

OnError GoTo ErrorOccured

	'**Reading Configuration File
'	mbSplitByHomeWork	= IIf(CONFIGReadKey(FILE_INI, "CONFIGURATION", "SPLIT_HOMEWORK")="1", TRUE, FALSE)
	Call DDCSetSplitByWorkerHome(IIf(CONFIGReadKey(FILE_INI, "CONFIGURATION", "SPLIT_HOMEWORK")="1", TRUE, FALSE))
'	Call DebugPrint("Split result tables by HOME/WORK: " & IIf(DDCSplitByWorkerHome(), "Yes", "No"))

	'***************************************************************************
	sFile = CONFIGReadKey(FILE_INI, "DD_TABFILES", "HEX_BOUNDARY")
'	Call DebugPrint("1. Boundary File: " & sFile)
	If sFile <> "" Then
		sFile		= FILEGetAbsolutePath(ApplicationDirectory$(), sFile)
	End If
	Call DDCSetBoundaryFile(sFile)

	sFile	= CONFIGReadKey(FILE_INI, "DD_TABFILES", "ORIG2DEST")
	If sFile <> "" Then
		sFile	= FILEGetAbsolutePath(ApplicationDirectory$(), sFile)
	End If
	Call DDCSetOrigin2DestFile(sFile)

	'***************************************************************************
	sFile	= CONFIGReadKey(FILE_INI, "DD_FOLDERS", "MAINDATA")
	If sFile <> "" Then
		sFile	= FILEGetAbsolutePath(ApplicationDirectory$(), sFile)
	End If
	Call DDCSetDDMainDataFolder(sFile)

	'***************************************************************************
	sType = CONFIGReadKey(FILE_INI, "DD_TABFILES", "DATATYPE")
	If sType <> "" Then
		Call DDCSetDataType(Val(sType))
	End If
	sType = CONFIGReadKey(FILE_INI, "DD_TABFILES", "DAYPART")
	If sType <> "" Then
		Call DDCSetDayPart(Val(sType))
	End If
	sType = CONFIGReadKey(FILE_INI, "DD_TABFILES", "BOUNDARYTYPE")
	If sType <> "" Then
		Call DDCSetBoundaryType(Val(sType))
	End If

	'***************************************************************************
	For i = 1 To 2
		sTo		= IIf(i = 1, "Orig", "Dest")
		sFrom	= IIf(i = 1, "Dest", "Orig")
		Call ARRAYAddValueString(marrQueryNames, sTo & "_DD")
		Call ARRAYAddValueString(marrQueryTypes, sTo)
		Call ARRAYAddValueString(marrQueryNames, sTo & "s_DD")
		Call ARRAYAddValueString(marrQueryTypes, sTo & "s")
		Call ARRAYAddValueString(marrQueryNames, sTo & "s_Home_DD")
		Call ARRAYAddValueString(marrQueryTypes, sTo & "s")
		Call ARRAYAddValueString(marrQueryNames, sTo & "s_Work_DD")
		Call ARRAYAddValueString(marrQueryTypes, sTo & "s")
		Call ARRAYAddValueString(marrQueryNames, sFrom & "_2_" & sTo & "s_DD")
		Call ARRAYAddValueString(marrQueryTypes, sFrom & "_2_" & sTo & "s")
		Call ARRAYAddValueString(marrQueryNames, sFrom & "_2_" & sTo & "s_Home_DD")
		Call ARRAYAddValueString(marrQueryTypes, sFrom & "_2_" & sTo & "s")
		Call ARRAYAddValueString(marrQueryNames, sFrom & "_2_" & sTo & "s_Work_DD")
		Call ARRAYAddValueString(marrQueryTypes, sFrom & "_2_" & sTo & "s")
	Next

'	Call DEBUGPrint("Reading Layer Settings...")
	For nName = 1 To Ubound(marrQueryNames)

'		Call DEBUGPrint("Reading Layer Setting " & marrQueryNames(nName))
		sSetting = CONFIGReadKey(FILE_INI, "LAYERSETTINGS", marrQueryNames(nName))
		If sSetting = "" Then
			tLyr.bSelectable	= TRUE
			tLyr.nDisplay		= LAYER_INFO_DISPLAY_GLOBAL
			If marrQueryNames(nName) Like "%_2_%" Then
				ReDim tLyr.penOverrideLine(1)
				tLyr.penOverrideLine(1)		= MakePen(3,3,8388608)
			Else
				Call tlsReset(tLyr)
				tLyr.nAlpha				= 147
				tLyr.penOverrideBorder(1)	= MENUGetLayerPen(sTo)
				tLyr.brsOverride(1)			= MENUGetLayerBrush(sTo)
			End If

			Call tlbsReset(tLbl)
		Else
			If Not tlsFromString(tLyr, sSetting) Then
				If marrQueryNames(nName) Like "%_2_%" Then
					ReDim tLyr.penOverrideLine(1)
					tLyr.penOverrideLine(1)		= MakePen(3,3,8388608)
				Else
					Call tlsReset(tLyr)
					tLyr.nAlpha				= 147
					tLyr.penOverrideBorder(1)	= MENUGetLayerPen(sTo)
					tLyr.brsOverride(1)			= MENUGetLayerBrush(sTo)
				End If
			End If
			sSetting = CONFIGReadKey(FILE_INI, "LABELSETTINGS", marrQueryNames(nName))
			If sSetting = "" Then
				Call tlbsReset(tLbl)
			Else
				If Not tlbsFromString(tLbl, sSetting) Then

				End If
			End If
		End If
		Call DDCAddLayerSettings(marrQueryNames(nName), marrQueryTypes(nName), tLyr, tLbl)
	Next

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUReadConfigFile")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUSaveAs

Dim	sTab, sFile, sPath, sName As String,
	i, nItem, nMID As Integer

OnError GoTo ErrorOccured

	nMID = FrontWindow()
	If nMID = 0 Then
		Note "Please open map window before using this feature!"
		Exit Sub
	End If
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Note "Please make a map window active before using this feature!"
		Exit Sub
	End If

	If Ubound(mtarrResults) = 0 Then
		Note "Please run an analysis before trying to save the result!"
		Exit Sub
	End If


	sTab	= mtarrResults(1).sQueryTable
	If sTab = "" Then
		Note "Please run an analysis before trying to save the result!"
		Exit Sub
	End If

	For i = 1 To Ubound(mtarrResults)
		If not TABIsOpen(mtarrResults(i).sQueryTable) Then
			Note "All Analysis results do not exist. Table '" & mtarrResults(i).sQueryTable & "' is not open!"
			Exit Sub
		End If
	Next

	sFile = FileSaveAsDlg("", "My Project", "TAB", "Specify location and project name for analysis result...")
	If sFile = "" Then
		Exit Sub
	End If
	sPath	= PathToDirectory$(sFile)
	sName	= PathToFileName$(sFile)
	sName	= Left$(PathToFileName$(sName), Len(sName) - 4)

	sFile = STRINGReplace(mtarrResults(1).sQueryTable, "_", " ")
	sFile = STRINGReplace(sFile, "DD", sName & ".tab")
	If FileExists(sPath & sFile) Then
		If Ask("The specified project already exists: '" & sPath & sFile & "'" & Chr$(10) & Chr$(10) & "Do you want to overwrite it?", "Abort", "Overwrte") Then
			Exit Sub
		End If
	End If

	If Not MENURenameAnalysisResult(sPath, sName) Then
		'**Failed somehow?
	End If

	Call MENUEnableDisableControls

''	sTo/sFrom = "Orig"
''	sTo/sFrom = "Dest"
''	sTo & "_DD"
''	sFrom & "s_DD"
''	sFrom & "s_Home_DD"
''	sFrom & "s_Work_DD"
''	sTo & "_2_" & sFrom & "s_DD"
''	sTo & "_2_" & sFrom & "s_Home_DD"
''	sTo & "_2_" & sFrom & "s_WORK_DD"
'
'	For i = 1 To Ubound(mtarrResults)
'		sFile = STRINGReplace(mtarrResults(i).sQueryTable, "_", " ")
'		sFile = STRINGReplace(sFile, "DD", sName & ".tab")
'		Call DEBUGPrint("Saving '" & mtarrResults(i).sQueryTable & "' into '" & sPath & sFile & "'")
'		Commit Table mtarrResults(i).sQueryTable As sPath & sFile
'		Close Table mtarrResults(i).sQueryTable
'		Open Table sPath & sFile
'		mtarrResults(i).sQueryTable = PathToTableName$(sPath & sFile)
'	Next
'
'	For i = 1 To 2
'		If i = 2 And Ubound(mtarrResults) = 3 Then
'			Exit For
'		End If
'
'		nItem = i * 2
'		Call MENUAddToQueryTablesToMap(nMID, mtarrResults(nItem).sQueryTable, mtarrResults(nItem + 1).sQueryTable, mtarrResults(nItem).sToFromType, mtarrResults(nItem).sOriginAreaType)
'	Next
'
'	Call MENUAddFromQueryTablesToMap(nMID, mtarrResults(1).sQueryTable, mtarrResults(1).sToFromType)
'
'	Redim mtarrResults(0)

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUSaveAs")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENURenameAnalysisResult(	  ByVal sPath As String
							, ByVal sName As String
							) As Logical

Dim	sFile, sTabFile, sTab As String,
	i As Integer

OnError GoTo ErrorOccured

MENURenameAnalysisResult = FALSE

'	sTo/sFrom = "Orig"
'	sTo/sFrom = "Dest"
'	sTo & "_DD"
'	sFrom & "s_DD"
'	sFrom & "s_Home_DD"
'	sFrom & "s_Work_DD"
'	sTo & "_2_" & sFrom & "s_DD"
'	sTo & "_2_" & sFrom & "s_Home_DD"
'	sTo & "_2_" & sFrom & "s_WORK_DD"

	For i = 1 To Ubound(mtarrResults)
		sFile = STRINGReplace(mtarrResults(i).sQueryTable, "_", " ")
		sFile = STRINGReplace(sFile, "DD", sName & ".tab")

		sTabFile	= sPath & sFile
		sTab = TABGetNameFromTabFile(sTabFile)
		If sTab <> "" Then
			Call DEBUGPrint("Closing and overwriting existing table '" & sTab & "'")
			Close Table sTab
		End If
		sTab = PathToTableName$(sTabFile)
		If TABIsOpen(sTab) Then
			Call DEBUGPrint("Closing existing table '" & sTab & "'")
			Close Table sTab
		End If

		Call DEBUGPrint("Renaming '" & mtarrResults(i).sQueryTable & "' into '" & sTabFile & "'")
		Rename Table mtarrResults(i).sQueryTable As sTabFile
'		Close Table mtarrResults(i).sQueryTable
'		Open Table sPath & sFile
'		mtarrResults(i).sQueryTable = PathToTableName$(sPath & sFile)
	Next

'	For i = 1 To 2
'		If i = 2 And Ubound(mtarrResults) = 3 Then
'			Exit For
'		End If

'		nItem = i * 2
'		Call MENUAddToQueryTablesToMap(nMID, mtarrResults(nItem).sQueryTable, mtarrResults(nItem + 1).sQueryTable, mtarrResults(nItem).sToFromType, mtarrResults(nItem).sOriginAreaType)
'	Next

'	Call MENUAddFromQueryTablesToMap(nMID, mtarrResults(1).sQueryTable, mtarrResults(1).sToFromType)

	Redim mtarrResults(0)

	MENURenameAnalysisResult = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENURenameAnalysisResult")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUCreateFromQueryTable(	  ByVal oPoint As Object			'Location to Query
							, ByVal sTable As String			'Table with DD Boundaries to query
							, ByVal sColumnAreaID As String	'Column with Area_ID
							, ByVal sQueryName As String		'Name of resulting query
							) As String					'Returns the Area ID

Dim	sAreaID As String,
	aAreaID As Alias

OnError GoTo ErrorOccured

MENUCreateFromQueryTable = ""

	Select *
		From sTable
		Where oPoint Within OBJ
		Into __currDD NoSelect Hide

	If TableInfo(__currDD, TAB_INFO_NROWS) = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "No Dynamic Demographic Polygon found at that location!", Notify_Error, 10000)
		Close Table __currDD
		Exit Function
	End If

	aAreaID	= "__currDD." & sColumnAreaID
	Fetch First From __currDD
	sAreaID	= aAreaID

	Close Table __currDD

	aAreaID	= sTable & "." & sColumnAreaID
	Do Case ColumnInfo(sTable, sColumnAreaID, COL_INFO_TYPE)
		Case COL_TYPE_CHAR
			Select *
				From sTable
				Where aAreaID = sAreaID
				And OBJ
				Into sQueryName NoSelect Hide
		Case COL_TYPE_INTEGER, COL_TYPE_DECIMAL, COL_TYPE_FLOAT, COL_TYPE_SMALLINT, COL_TYPE_LARGEINT
			Select *
				From sTable
				Where aAreaID = Val(sAreaID)
				And OBJ
				Into sQueryName NoSelect Hide
		Case Else
			Select *
				From sTable
				Where aAreaID = sAreaID
				And OBJ
				Into sQueryName NoSelect Hide
	End Case

	If TableInfo(sQueryName, TAB_INFO_NROWS) = 0 Then
		Close Table sQueryName
		Call RBNNotificationShow(PRGIGetApplicationName(), "No Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
		Exit Function
	End If

	Call DDFSaveAsTemp(sQueryName, TRUE, TRUE, TRUE, TRUE)

MENUCreateFromQueryTable = sAreaID

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUCreateFromQueryTable")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUCreateFromQueryTableFromTab( ByVal sSelectionTable As String	'Table with list of Area_IDs
								, ByVal sTable As String			'Table with DD Boundaries to query
								, ByVal sColumnAreaID As String	'Column with Area_ID
								, ByVal sQueryName As String		'Name of resulting query
								) As String					'Returns the Area ID

Dim	aAreaID, aAreaIDInput, aRowID As Alias,
	nRowID As Integer,
	sAreaIDs As String

OnError GoTo ErrorOccured

MENUCreateFromQueryTableFromTab = ""

	If TableInfo(sSelectionTable, TAB_INFO_NROWS) = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "No Dynamic Demographic Polygon Area_IDs specified!", Notify_Error, 10000)
		Exit Function
	End If

	aAreaID		= sTable & "." & sColumnAreaID
	aAreaIDInput	= sSelectionTable & "." & sColumnAreaID
	aRowID		= sSelectionTable & ".ROWID"

	Fetch First from sSelectionTable
	Do Until EOT(sSelectionTable)
		nRowID	= aRowID
		If nRowID > 3 Then
			sAreaIDs	= STRINGConcatenateWithSeparator(sAreaIDs, "and more", ", ")
			Exit Do
		End If
		sAreaIDs	= STRINGConcatenateWithSeparator(sAreaIDs, aAreaIDInput, ", ")

		Fetch Next from sSelectionTable
	Loop

	Select sAreaIDs "Area_ID", AggregateCombine(OBJ)
		From sTable
		Where aAreaID In (Select aAreaIDInput From sSelectionTable)
		And OBJ
		Into sQueryName NoSelect Hide

	If TableInfo(sQueryName, TAB_INFO_NROWS) = 0 Then
		Close Table sQueryName
		Call RBNNotificationShow(PRGIGetApplicationName(), "No Dynamic Demographic Polygons found using Selection!", Notify_Error, 10000)
		Exit Function
	End If

	Call DDFSaveAsTemp(sQueryName, TRUE, TRUE, TRUE, TRUE)

MENUCreateFromQueryTableFromTab = sAreaIDs

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUCreateFromQueryTableFromTab")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUCreateToQueryTables(	  ByVal oFromPolygon As Object		'Polygon of the starting position
							, ByVal sAreaID As String			'Area_ID to search for
							, ByVal sOriginAreaType As String		'Origin AreaType to search use
							, ByVal sTabBoundary As String		'Table with DD Boundaries to query
							, ByVal sColB_AreaID As String		'Column with Area_ID
							, ByVal sTabOrigin2Dest As String		'Table with Origin 2 Destinations to query
							, ByVal sColOD_AreaID As String		'Column with Area_ID - of the start point
							, ByVal sColOD_AreaIDStart As String	'Column with Area_ID - of the end point
							, ByVal sColOD_OriginAreaType As String	'Column with Origin_Area_Type
							, ByVal sQueryNameArea As String		'Name of resulting query with polygons
							, ByVal sQueryNameLine As String		'Name of resulting query with lines
							) As Integer						'Number of Rows Selected, 0 if none were found

Dim	nNumRows As Integer,
	sCmd, sUnit, sProcess As String,
	nTime, nTime1 As Integer,
	fRoundTo As Float

OnError GoTo ErrorOccured

MENUCreateToQueryTables = 0

	sCmd	= "Select *"
			& " From " & sTabOrigin2Dest

	If ColumnInfo(sTabOrigin2Dest, sColOD_AreaIDStart, COL_INFO_TYPE) = COL_TYPE_CHAR Then
		sCmd = sCmd & " Where " & sColOD_AreaIDStart & " = " & Chr$(34) & sAreaID & Chr$(34)
	Else
		sCmd = sCmd & " Where " & sColOD_AreaIDStart & " = " & sAreaID
	End If

	If sOriginAreaType <> "" Then
		sCmd	= sCmd & " And " & sColOD_OriginAreaType & " > 0"
	End If

	sCmd	= sCmd & " And OBJ"
			& " Into _temp NoSelect Hide"

	nTime	= Timer()
	nTime1	= Timer()
	sProcess	= "Query 1: " & sCmd
	Call DEBUGPrint(sProcess)
	Run Command sCmd
	nNumRows	= TableInfo("_temp", TAB_INFO_NROWS)
	Call DEBUGPrint("Done 1: " & FormatNumber$(Timer() - nTime1) & " seconds: " & FormatNumber$(nNumRows))

	If nNumRows = 0 Then
		Call TABClose("_temp")
		Exit Function
	End If

	sCmd	= "Select *"
			& " From " & sTabBoundary & " As " & Chr$(34) & "b" & Chr$(34)
				&  ", _temp As " & Chr$(34) & "od" & Chr$(34)
			& " Where b." & sColB_AreaID & " = od." & sColOD_AreaID
			& " And b.OBJ"
			& " Into " & sQueryNameArea & " NoSelect Hide"

	nTime1	= Timer()
	sProcess	= "Query 2: " & sCmd
	Call DEBUGPrint(sProcess)
	Run Command sCmd
	nNumRows	= TableInfo(sQueryNameArea, TAB_INFO_NROWS)
	Call DEBUGPrint("Done 2: " & FormatNumber$(Timer() - nTime1) & " seconds: " & FormatNumber$(nNumRows))

	If nNumRows = 0 Then
		Call TABClose(sQueryNameArea)
		Exit Function
	End If

	sProcess	= "DDFSaveAsTemp: " & sQueryNameArea
	Call DDFSaveAsTemp(sQueryNameArea, TRUE, TRUE, TRUE, TRUE)
	Call TABClose("_temp")

	If sQueryNameLine <> "" Then
		sUnit = DDFGetPreferenceDistanceUnit()
		Do Case sUnit
			Case "mm"
				fRoundTo	= 10000.0	'-> 10 m
			Case "cm", "in"
				fRoundTo	= 1000.0	'-> 10-25 m
			Case "ft", "survey ft", "li"
				fRoundTo	= 100.0	'-> 20-30 meters
			Case "m", "yd", "rd"
				fRoundTo	= 10.0	'-> 9-50 meters
			Case "ch"
				fRoundTo	= 1.0	'-> 20 meters
			Case "km", "mi", "nmi"
				fRoundTo	= 0.01	'-> 10-18 meters
		End Case

		nTime1	= Timer()
		sProcess	= "Query 3: Creating Lines: " & FormatNumber$(CentroidX(oFromPolygon)) & " | " & FormatNumber$(CentroidX(oFromPolygon))
		Call DEBUGPrint(sProcess)
		Select q.*
				, Round(ObjectLen(ConnectObjects(Centroid(oFromPolygon), Centroid(q.OBJ), TRUE), sUnit), fRoundTo) "Distance_" & PathToTableName$(sUnit)
				, ConnectObjects(Centroid(oFromPolygon), Centroid(q.OBJ), TRUE) Object
			From sQueryNameArea As "q"
			Into sQueryNameLine NoSelect Hide
		Call DEBUGPrint("Done 3: " & FormatNumber$(Timer() - nTime1) & " seconds: " & FormatNumber$(TableInfo(sQueryNameLine, TAB_INFO_NROWS)))
	End If

	sProcess	= "DDFSaveAsTemp: " & sQueryNameLine
	Call DDFSaveAsTemp(sQueryNameLine, TRUE, TRUE, TRUE, TRUE)

	Call DEBUGPrint("MENUCreateToQueryTables, Total: " & FormatNumber$(Timer() - nTime) & " seconds")

	MENUCreateToQueryTables = nNumRows

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUCreateToQueryTables: " & sProcess)
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUCreateToQueryTablesFromTab(  ByVal sSelectionTable As String		'Table with list of Area_IDs
								, ByVal oFromPolygon As Object		'Polygon of the starting position
								, ByVal sAreaIDs As String			'Area_IDs from selection
								, ByVal sOriginAreaType As String		'Origin AreaType to search use
								, ByVal sTabBoundary As String		'Table with DD Boundaries to query
								, ByVal sColB_AreaID As String		'Column with Area_ID
								, ByVal sTabOrigin2Dest As String		'Table with Origin 2 Destinations to query
								, ByVal sColOD_AreaID As String		'Column with Area_ID - of the start point
								, ByVal sColOD_AreaIDStart As String	'Column with Area_ID - of the end point
								, ByVal sColOD_OriginAreaType As String	'Column with Origin_Area_Type
								, ByVal sQueryNameArea As String		'Name of resulting query with polygons
								, ByVal sQueryNameLine As String		'Name of resulting query with lines
								) As Integer						'Number of Rows Selected, 0 if none were found

Dim	nNumRows As Integer,
	sCmd As String,
	nTime, nTime1 As Integer

OnError GoTo ErrorOccured

MENUCreateToQueryTablesFromTab = 0

	sCmd	= "Select *"
			& " From " & sTabOrigin2Dest
			& " Where " & sColOD_AreaIDStart
					& " In (Select " & sColB_AreaID & " From " & sSelectionTable & ")"

	If sOriginAreaType <> "" Then
		sCmd	= sCmd & " And " & sColOD_OriginAreaType & " > 0"
	End If

	sCmd	= sCmd & " And OBJ"
			& " Into _temp NoSelect Hide"

	nTime	= Timer()
	nTime1	= Timer()
	Call DEBUGPrint("Query 1: " & sCmd)
	Run Command sCmd
	nNumRows	= TableInfo("_temp", TAB_INFO_NROWS)
	Call DEBUGPrint("Done 1: " & FormatNumber$(Timer() - nTime1) & " seconds: " & FormatNumber$(nNumRows))

	If nNumRows = 0 Then
		Call TABClose("_temp")
		Exit Function
	End If

	sCmd	= "Select " & Chr$(34) & sAreaIDs & Chr$(34) & " " & Chr$(34) & "AREA_ID" & Chr$(34)
				& ", od." & sColOD_AreaID
				& " From " & sTabBoundary & " As " & Chr$(34) & "b" & Chr$(34)
					& ", _temp As " & Chr$(34) & "od" & Chr$(34)
				& " Where b." & sColB_AreaID & " = od." & sColOD_AreaID
				& " And b.OBJ"
				& " Into _tempA NoSelect Hide"

	nTime	= Timer()
	nTime1	= Timer()
	Call DEBUGPrint("Query 2: " & sCmd)
	Run Command sCmd
	nNumRows	= TableInfo("_tempA", TAB_INFO_NROWS)
	Call DEBUGPrint("Done 2: " & FormatNumber$(Timer() - nTime1) & " seconds: " & FormatNumber$(nNumRows))

	If nNumRows = 0 Then
		Call TABClose("_tempA")
		Exit Function
	End If

	Call DDFSaveAsTemp("_tempA", TRUE, TRUE, TRUE, FALSE)

	nTime1	= Timer()
	Call DEBUGPrint("Query 3: Aggregating Objects")
	Select COL1, COL2, Count(*) "Num_Destinations", AggregateCombine(OBJ)
		From _tempA
		Group By COL2
		Into sQueryNameArea NoSelect Hide

	nNumRows	= TableInfo(sQueryNameArea, TAB_INFO_NROWS)
	Call DEBUGPrint("Done 3: " & FormatNumber$(Timer() - nTime1) & " seconds: " & FormatNumber$(nNumRows))

	Call DDFSaveAsTemp(sQueryNameArea, TRUE, TRUE, TRUE, TRUE)
	Call TABClose("_tempA")
	Call TABClose("_temp")

	If sQueryNameLine <> "" Then
		nTime1	= Timer()
		Call DEBUGPrint("Query 4: Creating Lines")
		Select q.COL1, q.COL2, q.Num_Destinations, ConnectObjects(Centroid(oFromPolygon), Centroid(q.OBJ), TRUE) Object
			From sQueryNameArea As "q"
			Into sQueryNameLine NoSelect Hide
		Call DEBUGPrint("Done 4: " & FormatNumber$(Timer() - nTime1) & " seconds: " & FormatNumber$(TableInfo(sQueryNameLine, TAB_INFO_NROWS)))
	End If

	Call DDFSaveAsTemp(sQueryNameLine, TRUE, TRUE, TRUE, TRUE)

	MENUCreateToQueryTablesFromTab = nNumRows

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUCreateToQueryTablesFromTab")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUAddFromQueryTablesToMap(	  ByVal nMID As Integer
							, ByVal sQueryName As String
							, ByVal sToFromType As String)

OnError GoTo ErrorOccured

	Add Map
		Window nMID
		Layer sQueryName

	If Not DDCApplyLayerSettings(nMID, sQueryName, "") Then
		Set Map
			Window nMID
			Layer sQueryName
				Display Global Global Pen MENUGetLayerPen(sToFromType) Global Brush MENUGetLayerBrush(sToFromType)
				Alpha 127
		Call DebugPrint("Layer '" & sQueryName & "' has been manually configured.")
	End If

OnError GoTo ErrorOccured

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUAddFromQueryTablesToMap: QueryName:" & sQueryName & " To-From Type: " & sToFromType)
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'
'**********************************************************************************************''
Sub MENUAddToQueryTablesToMap(  ByVal nMID As Integer
						, ByVal sQueryNameArea As String
						, ByVal sQueryNameLine As String
						, ByVal sToFromType As String
						, ByVal sOriginAreaType As String)

Dim	nGroupLayerID As Integer

OnError GoTo ErrorOccured

	If sOriginAreaType = "" Then
		Add Map
			Window nMID
			Layer sQueryNameLine, sQueryNameArea
	Else
		nGroupLayerID = GLYRGetGroupLayerID(nMID, 0, sOriginAreaType, TRUE)
		If nGroupLayerID < 0 Then
			Call DebugPrint("Creating NEW group layer '" & sOriginAreaType & "'")
			Add Map
				Window nMID
				GroupLayer (sOriginAreaType, sQueryNameLine, sQueryNameArea) Position 2
		Else
			Call DebugPrint("Using EXISTING group layer '" & sOriginAreaType & "'")
			Add Map
				Window nMID
				Layer sQueryNameLine, sQueryNameArea
				DestGrouplayer sOriginAreaType
		End If
	End If

	If Not DDCApplyLayerSettings(nMID, sQueryNameLine, "") Then
		Set Map
			Window nMID
				Layer sQueryNameLine
					Display Global Global Line (3,3,8388608)
		Call DebugPrint("Layer '" & sQueryNameLine & "' has been manually configured.")
	End If
	If Not DDCApplyLayerSettings(nMID, sQueryNameArea, "") Then
		Set Map
			Window nMID
				Layer sQueryNameArea
					Display Global Global Pen MENUGetLayerPen(sToFromType) Global Brush MENUGetLayerBrush(sToFromType)
					Alpha 127
		Call DebugPrint("Layer '" & sQueryNameArea & "' has been manually configured.")
	End If

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUAddToQueryTablesToMap")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUOpenDDInputTables() As Logical

OnError GoTo ErrorOccured

MENUOpenDDInputTables = FALSE

	msTabBoundary = TABGetNameFromTabFile(DDCGetBoundaryFile())
	If msTabBoundary = "" Then
		If FileExists(DDCGetBoundaryFile()) Then
			Open Table DDCGetBoundaryFile() Interactive
		End If
		msTabBoundary = TABGetNameFromTabFile(DDCGetBoundaryFile())
		If msTabBoundary = "" Then
			Exit Sub
		End If
	End If

	msTabOrigin2Dest = TABGetNameFromTabFile(DDCGetOrigin2DestFile())
	If msTabOrigin2Dest = "" Then
		If FileExists(DDCGetOrigin2DestFile()) Then
			Open Table DDCGetOrigin2DestFile() Interactive
		End If
		msTabOrigin2Dest = TABGetNameFromTabFile(DDCGetOrigin2DestFile())
		If msTabOrigin2Dest = "" Then
			Exit Sub
		End If
	End If

MENUOpenDDInputTables = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUOpenDDInputTables")
	Call ERRShow()

End Function
'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub MENUDestination2OriginsTool

Dim	oPoint, oFrom As Object,
	aOBJ As Alias,
	fX, fY As Float,
	sFrom, sTo, sAreaID, sQueryName, sZoomLayer, sOriginAreaType, sOriginAreaTypeCol, sBoundaryAreaIDCol As String,
	i, nItem, nMID, nGroupLayerID, nCounts(2) As Integer

OnError GoTo ErrorOccured

	sFrom	= "Dest"
	sTo		= "Orig"

	If FrontWindow() = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please use this tool in a map window!", Notify_Error, 10000)
		Exit Sub
	End If

	nMID = FrontWindow()
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please use this tool in a map window!", Notify_Error, 10000)
		Exit Sub
	End If

	If not MENUOpenDDInputTables() Then
		Exit Sub
	End If

	Set CoordSys Table msTabBoundary
	fX	= CommandInfo(CMD_INFO_X)
	fY	= CommandInfo(CMD_INFO_Y)

	oPoint = CreatePoint(fX, fY)

	If Not MENUFromToAnalysis(sFrom, sTo, oPoint, nMID) Then
		Exit Sub
	End If

'	Call DDFCloseTempDDTables()
'
'	sQueryName		= sFrom & "_DD"
'	sBoundaryAreaIDCol	= IIf(COLExists(msTabBoundary, "Area_ID")=TRUE, "Area_ID", "Dest_Area_ID")
'	sAreaID			= MENUCreateFromQueryTable(oPoint, msTabBoundary, sBoundaryAreaIDCol, sQueryName)
'	If sAreaID = "" Then
'		Exit Sub
'	End If
'	Call DebugPrint(FormatNumber$(TableInfo(sQueryName, TAB_INFO_NROWS)) & " " & sFrom & "(s) found using " & sAreaID)
'
'	Fetch First From sQueryName
'	aOBJ		= sQueryName & ".OBJ"
'	oFrom	= aOBJ
'
'	Redim mtarrResults(1)
'	mtarrResults(1).sQueryTable 		= sQueryName
'	mtarrResults(1).sToFromType		= sFrom
'	mtarrResults(1).sOriginAreaType	= ""
'
'	If DDCSplitByWorkerHome() Then
'		For i = 1 To 2
'			sOriginAreaType	= IIf(i = 1, "Home", "Work")
'			sOriginAreaTypeCol	= IIf(i = 1, "PPT_H", "PPT_W")
'			sQueryName		= sTo & "s_" & sOriginAreaType & "_DD"
'
'			nCounts(i)	= MENUCreateToQueryTables( oFrom, sAreaID, sOriginAreaType
'								, msTabBoundary, sBoundaryAreaIDCol
'								, msTabOrigin2Dest, "Origin_Area_ID", "Dest_Area_ID", sOriginAreaTypeCol	'"Origin_Area_Type"
'								, sQueryName, sFrom & "_2_" & sQueryName)
'			Call DebugPrint(FormatNumber$(nCounts(i)) & " " & sTo & "(s) found for '" & sOriginAreaType & "'.")
'
'			If nCounts(i) = 0 Then
'				Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons '" & sOriginAreaType & "' found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
'				Call DDFCloseTempDDTables
'				Exit Sub
'			Else
'				Call MENUAddToQueryTablesToMap(nMID, sQueryName, sFrom & "_2_" & sQueryName, sTo & "s", sOriginAreaType)
'				nItem	= 2 * i
'				Redim mtarrResults(nItem + 1)
'				mtarrResults(nItem).sQueryTable 		= sQueryName
'				mtarrResults(nItem).sToFromType		= sTo & "s"
'				mtarrResults(nItem).sOriginAreaType	= sOriginAreaType
'				mtarrResults(nItem + 1).sQueryTable 	= sFrom & "_2_" & sQueryName
'				mtarrResults(nItem + 1).sToFromType	= sTo & "s"
'				mtarrResults(nItem + 1).sOriginAreaType	= sOriginAreaType
'			End If
'		Next
'
'		sZoomLayer	= sTo & "s_" & IIf(nCounts(1) > nCounts(2), "Home", "Work") & "_DD"
'	Else
'		sQueryName		= sTo & "s_DD"
'
'		nCounts(1)	= MENUCreateToQueryTables( oFrom, sAreaID, ""
'							, msTabBoundary, sBoundaryAreaIDCol
'							, msTabOrigin2Dest, "Origin_Area_ID", "Dest_Area_ID", ""
'							, sQueryName, sFrom & "_2_" & sQueryName)
'		Call DebugPrint(FormatNumber$(nCounts(1)) & " " & sTo & "(s) found.")
'
'		If nCounts(1) = 0 Then
'			Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
'			Call DDFCloseTempDDTables
'			Exit Sub
'		Else
'			sZoomLayer	= sFrom & "_2_" & sQueryName
'
'			Call MENUAddToQueryTablesToMap(nMID, sQueryName, sFrom & "_2_" & sQueryName, sTo & "s", "")
'			nItem	= 2
'			Redim mtarrResults(nItem + 1)
'			mtarrResults(nItem).sQueryTable 		= sQueryName
'			mtarrResults(nItem).sToFromType		= sTo & "s"
'			mtarrResults(nItem).sOriginAreaType	= ""
'			mtarrResults(nItem + 1).sQueryTable 	= sFrom & "_2_" & sQueryName
'			mtarrResults(nItem + 1).sToFromType	= sTo & "s"
'			mtarrResults(nItem + 1).sOriginAreaType	= ""
'		End If
'	End If
'
'	Call MENUAddFromQueryTablesToMap(nMID, mtarrResults(1).sQueryTable, mtarrResults(1).sToFromType)
'
'	Call DebugPrint("Zooming to extent of layer '" & sZoomLayer & "'")
'	Set Window nMID Enhanced On
'	Set Map
'		Window nMID
'		Zoom Entire Layer sZoomLayer
'
'	If DDCSplitByWorkerHome() Then
'		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
'					& FormatNumber$(nCounts(1)) & " Home " & sTo & "s and "
'					& FormatNumber$(nCounts(2)) & " Work " & sTo & "s"
'				, Notify_Info, 10000)
'	Else
'		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
'					& FormatNumber$(nCounts(1)) & " " & sTo & "s"
'				, Notify_Info, 10000)
'	End If

	Call MENUEnableDisableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUDestination2OriginsTool")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub MENUOrigin2DestinationsTool

Dim	oPoint, oFrom As Object,
	aOBJ As Alias,
	fX, fY As Float,
	sFrom, sTo, sAreaID, sQueryName, sZoomLayer, sOriginAreaType, sBoundaryAreaIDCol, sOriginAreaTypeCol As String,
	i, nItem, nMID, nGroupLayerID, nCounts(2) As Integer

OnError GoTo ErrorOccured

	sFrom	= "Orig"
	sTo		= "Dest"

	If FrontWindow() = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please use this tool in a map window!", Notify_Error, 10000)
		Exit Sub
	End If

	nMID = FrontWindow()
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please use this tool in a map window!", Notify_Error, 10000)
		Exit Sub
	End If

	If not MENUOpenDDInputTables() Then
		Exit Sub
	End If

	Set CoordSys Table msTabBoundary
	fX	= CommandInfo(CMD_INFO_X)
	fY	= CommandInfo(CMD_INFO_Y)

	oPoint = CreatePoint(fX, fY)

	If Not MENUFromToAnalysis(sFrom, sTo, oPoint, nMID) Then
		Exit Sub
	End If

'	Call DDFCloseTempDDTables()
'
'	sQueryName		= sFrom & "_DD"
'	sBoundaryAreaIDCol	= IIf(COLExists(msTabBoundary, "Area_ID")=TRUE, "Area_ID", "Dest_Area_ID")
'	sAreaID			= MENUCreateFromQueryTable(oPoint, msTabBoundary, sBoundaryAreaIDCol, sQueryName)
'	If sAreaID = "" Then
'		Exit Sub
'	End If
'	Call DebugPrint(FormatNumber$(TableInfo(sQueryName, TAB_INFO_NROWS)) & " " & sFrom & "(s) found using " & sAreaID)
'
'	Fetch First From sQueryName
'	aOBJ		= sQueryName & ".OBJ"
'	oFrom	= aOBJ
'
'	Redim mtarrResults(1)
'	mtarrResults(1).sQueryTable 		= sQueryName
'	mtarrResults(1).sToFromType		= sFrom
'	mtarrResults(1).sOriginAreaType	= ""
'
'	If DDCSplitByWorkerHome() Then
'		For i = 1 To 2
'			sOriginAreaType	= IIf(i = 1, "Home", "Work")
'			sOriginAreaTypeCol	= IIf(i = 1, "PPT_H", "PPT_W")
'			sQueryName		= sTo & "s_" & sOriginAreaType & "_DD"
'
'			nCounts(i)	= MENUCreateToQueryTables( oFrom, sAreaID, sOriginAreaType
'								, msTabBoundary, sBoundaryAreaIDCol
'								, msTabOrigin2Dest, "Dest_Area_ID", "Origin_Area_ID", sOriginAreaTypeCol	'"Origin_Area_Type"
'								, sQueryName, sFrom & "_2_" & sQueryName)
'			Call DebugPrint(FormatNumber$(nCounts(i)) & " " & sTo & "(s) found for '" & sOriginAreaType & "'.")
'
'			If nCounts(i) = 0 Then
'				Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons '" & sOriginAreaType & "' found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
'				Call DDFCloseTempDDTables
'				Exit Sub
'			Else
'				Call MENUAddToQueryTablesToMap(nMID, sQueryName, sFrom & "_2_" & sQueryName, sTo & "s", sOriginAreaType)
'				nItem	= 2 * i
'				Redim mtarrResults(nItem + 1)
'				mtarrResults(nItem).sQueryTable 		= sQueryName
'				mtarrResults(nItem).sToFromType		= sTo & "s"
'				mtarrResults(nItem).sOriginAreaType	= sOriginAreaType
'				mtarrResults(nItem + 1).sQueryTable 	= sFrom & "_2_" & sQueryName
'				mtarrResults(nItem + 1).sToFromType	= sTo & "s"
'				mtarrResults(nItem + 1).sOriginAreaType	= sOriginAreaType
'			End If
'		Next
'
'		sZoomLayer	= sTo & "s_" & IIf(nCounts(1) > nCounts(2), "Home", "Work") & "_DD"
'	Else
'		sQueryName	= sTo & "s_DD"
'
'		nCounts(1)	= MENUCreateToQueryTables( oFrom, sAreaID, ""
'						, msTabBoundary, sBoundaryAreaIDCol
'						, msTabOrigin2Dest, "Dest_Area_ID", "Origin_Area_ID", ""
'						, sQueryName, sFrom & "_2_" & sQueryName)
'		Call DebugPrint(FormatNumber$(nCounts(1)) & " " & sTo & "(s) found.")
'
'		If nCounts(1) = 0 Then
'			Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
'			Call DDFCloseTempDDTables
'			Exit Sub
'		Else
'			sZoomLayer	= sFrom & "_2_" & sQueryName
'
'			Call MENUAddToQueryTablesToMap(nMID, sQueryName, sFrom & "_2_" & sQueryName, sTo & "s", "")
'			nItem	= 2
'			Redim mtarrResults(nItem + 1)
'			mtarrResults(nItem).sQueryTable 		= sQueryName
'			mtarrResults(nItem).sToFromType		= sTo & "s"
'			mtarrResults(nItem).sOriginAreaType	= ""
'			mtarrResults(nItem + 1).sQueryTable 	= sFrom & "_2_" & sQueryName
'			mtarrResults(nItem + 1).sToFromType	= sTo & "s"
'			mtarrResults(nItem + 1).sOriginAreaType	= ""
'		End If
'	End If
'
'	Call MENUAddFromQueryTablesToMap(nMID, mtarrResults(1).sQueryTable, mtarrResults(1).sToFromType)
'
'	Call DebugPrint("Zooming to extent of layer '" & sZoomLayer & "'")
'	Set Window nMID Enhanced On
'	Set Map
'		Window nMID
'		Zoom Entire Layer sZoomLayer
'
'	If DDCSplitByWorkerHome() Then
'		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
'					& FormatNumber$(nCounts(1)) & " Home " & sTo & "s and "
'					& FormatNumber$(nCounts(2)) & " Work " & sTo & "s"
'				, Notify_Info, 10000)
'	Else
'		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
'					& FormatNumber$(nCounts(1)) & " " & sTo & "s"
'				, Notify_Info, 10000)
'	End If

	Call MENUEnableDisableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUOrigin2DestinationsTool")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Function MENUFromToAnalysis(	  ByVal sFrom As String
						, ByVal sTo As String
						, ByVal oPoint As Object
						, ByVal nMID As Integer
						) As Logical

Dim	oFrom As Object,
	aOBJ As Alias,
	sAreaID, sQueryName, sQueryNameLine, sZoomLayer, sOriginAreaType As String,
	sBoundaryAreaIDCol, sOriginAreaTypeCol, sODAreaIDCol, sODAreaIDStartCol As String,
	i, nItem, nGroupLayerID, nCounts(2) As Integer

OnError GoTo ErrorOccured

MENUFromToAnalysis = FALSE

	Call DDFCloseTempDDTables()

	sQueryName		= sFrom & "_DD"
	sBoundaryAreaIDCol	= IIf(COLExists(msTabBoundary, "Area_ID")=TRUE, "Area_ID", "Dest_Area_ID")
	sAreaID			= MENUCreateFromQueryTable(oPoint, msTabBoundary, sBoundaryAreaIDCol, sQueryName)
	If sAreaID = "" Then
		Exit Function
	End If
	Call DebugPrint(FormatNumber$(TableInfo(sQueryName, TAB_INFO_NROWS)) & " " & sFrom & "(s) found using " & sAreaID)

	Fetch First From sQueryName
	aOBJ		= sQueryName & ".OBJ"
	oFrom	= aOBJ

	Redim mtarrResults(1)
	mtarrResults(1).sQueryTable 		= sQueryName
	mtarrResults(1).sToFromType		= sFrom
	mtarrResults(1).sOriginAreaType	= ""

	sODAreaIDCol			= IIf(sFrom="Orig", "Dest_Area_ID", "Origin_Area_ID")
	sODAreaIDStartCol		= IIf(sFrom="Orig", "Origin_Area_ID", "Dest_Area_ID")

	If DDCSplitByWorkerHome() Then
		For i = 1 To 2
			sOriginAreaType	= IIf(i = 1, "Home", "Work")
			sOriginAreaTypeCol	= IIf(i = 1, "PPT_H", "PPT_W")
			sQueryName		= sTo & "s_" & sOriginAreaType & "_DD"
			sQueryNameLine		= sFrom & "_2_" & sQueryName

			nCounts(i)	= MENUCreateToQueryTables( oFrom, sAreaID, sOriginAreaType
								, msTabBoundary, sBoundaryAreaIDCol
								, msTabOrigin2Dest, sODAreaIDCol, sODAreaIDStartCol, sOriginAreaTypeCol	'"Origin_Area_Type"
								, sQueryName, sQueryNameLine)
			Call DebugPrint(FormatNumber$(nCounts(i)) & " " & sTo & "(s) found for '" & sOriginAreaType & "'.")

			If nCounts(i) = 0 Then
				Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons '" & sOriginAreaType & "' found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
				Call DDFCloseTempDDTables
				Exit Sub
			Else
				Call MENUAddToQueryTablesToMap(nMID, sQueryName, sQueryNameLine, sTo & "s", sOriginAreaType)
				nItem	= 2 * i
				Redim mtarrResults(nItem + 1)
				mtarrResults(nItem).sQueryTable 		= sQueryName
				mtarrResults(nItem).sToFromType		= sTo & "s"
				mtarrResults(nItem).sOriginAreaType	= sOriginAreaType
				mtarrResults(nItem + 1).sQueryTable 	= sQueryNameLine
				mtarrResults(nItem + 1).sToFromType	= sTo & "s"
				mtarrResults(nItem + 1).sOriginAreaType	= sOriginAreaType
			End If
		Next

		sZoomLayer	= sTo & "s_" & IIf(nCounts(1) > nCounts(2), "Home", "Work") & "_DD"
	Else
		sQueryName		= sTo & "s_DD"
		sQueryNameLine		= sFrom & "_2_" & sQueryName

		nCounts(1)	= MENUCreateToQueryTables( oFrom, sAreaID, ""
						, msTabBoundary, sBoundaryAreaIDCol
						, msTabOrigin2Dest, sODAreaIDCol, sODAreaIDStartCol, ""
						, sQueryName, sQueryNameLine)
		Call DebugPrint(FormatNumber$(nCounts(1)) & " " & sTo & "(s) found.")

		If nCounts(1) = 0 Then
			Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
			Call DDFCloseTempDDTables
			Exit Sub
		Else
			sZoomLayer	= sQueryNameLine

			Call MENUAddToQueryTablesToMap(nMID, sQueryName, sQueryNameLine, sTo & "s", "")
			nItem	= 2
			Redim mtarrResults(nItem + 1)
			mtarrResults(nItem).sQueryTable 		= sQueryName
			mtarrResults(nItem).sToFromType		= sTo & "s"
			mtarrResults(nItem).sOriginAreaType	= ""
			mtarrResults(nItem + 1).sQueryTable 	= sQueryNameLine
			mtarrResults(nItem + 1).sToFromType	= sTo & "s"
			mtarrResults(nItem + 1).sOriginAreaType	= ""
		End If
	End If

	If nMID <> 0 Then
		Call MENUAddFromQueryTablesToMap(nMID, mtarrResults(1).sQueryTable, mtarrResults(1).sToFromType)

		Call DebugPrint("Zooming to extent of layer '" & sZoomLayer & "'")
		Set Window nMID Enhanced On
		Set Map
			Window nMID
			Zoom Entire Layer sZoomLayer
	End If

	If DDCSplitByWorkerHome() Then
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " Home " & sTo & "s and "
					& FormatNumber$(nCounts(2)) & " Work " & sTo & "s"
				, Notify_Info, 10000)
	Else
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " " & sTo & "s"
				, Notify_Info, 10000)
	End If

	MENUFromToAnalysis = TRUE

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUFromToAnalysis")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub MENUDestination2OriginsFromSel

Dim	oPoint, oFrom As Object,
	aOBJ As Alias,
	sFrom, sTo, sAreaID, sQueryName, sZoomLayer, sSelectionTable, sOriginAreaType, sOriginAreaTypeCol, sBoundaryAreaIDCol As String,
	i, nItem, nMID, nGroupLayerID, nCounts(2) As Integer

OnError GoTo ErrorOccured

	sFrom	= "Dest"
	sTo		= "Orig"

	If FrontWindow() = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please set a map window as the active window!", Notify_Error, 10000)
		Exit Sub
	End If
	nMID = FrontWindow()
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please set a map window as the active window!", Notify_Error, 10000)
		Exit Sub
	End If

	If not MENUOpenDDInputTables() Then
		Exit Sub
	End If

	If SelectionInfo(SEL_INFO_NROWS) = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please select the destination area for the analysis!", Notify_Error, 10000)
		Exit Sub
	End If
	If Not SelectionInfo(SEL_INFO_TABLENAME) = msTabBoundary Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please select the destination area for the analysis from the boundary table, '" & msTabBoundary & "'!", Notify_Error, 10000)
		Exit Sub
	End If
	sSelectionTable	= SelectionInfo(SEL_INFO_SELNAME)

	Call DDFCloseTempDDTables()

	sQueryName		= sFrom & "_DD"
'	sODAreaIDCol			= IIf(sFrom="Orig", "Dest_Area_ID", "Origin_Area_ID")
'	sODAreaIDStartCol		= IIf(sFrom="Orig", "Origin_Area_ID", "Dest_Area_ID")

	sBoundaryAreaIDCol	= IIf(COLExists(msTabBoundary, "Area_ID")=TRUE, "Area_ID", "Dest_Area_ID")
	sAreaID			= MENUCreateFromQueryTableFromTab(sSelectionTable, msTabBoundary, sBoundaryAreaIDCol, sQueryName)
	If sAreaID = "" Then
		Call TABClose(sSelectionTable)
		Exit Sub
	End If
	Call DebugPrint(FormatNumber$(TableInfo(sQueryName, TAB_INFO_NROWS)) & " " & sFrom & "(s) found using " & sAreaID)

	Fetch First From sQueryName
	aOBJ		= sQueryName & ".OBJ"
	oFrom	= aOBJ

	Redim mtarrResults(1)
	mtarrResults(1).sQueryTable 		= sQueryName
	mtarrResults(1).sToFromType		= sFrom
	mtarrResults(1).sOriginAreaType	= ""

	If DDCSplitByWorkerHome() Then
		For i = 1 To 2
			sOriginAreaType	= IIf(i = 1, "Home", "Work")
			sOriginAreaTypeCol	= IIf(i = 1, "PPT_H", "PPT_W")
			sQueryName		= sTo & "s_" & sOriginAreaType & "_DD"

			nCounts(i)	= MENUCreateToQueryTablesFromTab( sSelectionTable, oFrom, sAreaID, sOriginAreaType
								, msTabBoundary, sBoundaryAreaIDCol
								, msTabOrigin2Dest, "Origin_Area_ID", "Dest_Area_ID", sOriginAreaTypeCol	'"Origin_Area_Type"
								, sQueryName, sFrom & "_2_" & sQueryName)
			Call DebugPrint(FormatNumber$(nCounts(i)) & " " & sTo & "(s) found for '" & sOriginAreaType & "'.")

			If nCounts(i) = 0 Then
				Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons '" & sOriginAreaType & "' found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
				Call TABClose(sSelectionTable)
				Call DDFCloseTempDDTables
				Exit Sub
			Else
				Call MENUAddToQueryTablesToMap(nMID, sQueryName, sFrom & "_2_" & sQueryName, sTo & "s", sOriginAreaType)
				nItem	= 2 * i
				Redim mtarrResults(nItem + 1)
				mtarrResults(nItem).sQueryTable 		= sQueryName
				mtarrResults(nItem).sToFromType		= sTo & "s"
				mtarrResults(nItem).sOriginAreaType	= sOriginAreaType
				mtarrResults(nItem + 1).sQueryTable 	= sFrom & "_2_" & sQueryName
				mtarrResults(nItem + 1).sToFromType	= sTo & "s"
				mtarrResults(nItem + 1).sOriginAreaType	= sOriginAreaType
			End If
		Next

		sZoomLayer	= sTo & "s_" & IIf(nCounts(1) > nCounts(2), "Home", "Work") & "_DD"
	Else
		sQueryName	= sTo & "s_DD"

		nCounts(1)	= MENUCreateToQueryTablesFromTab( sSelectionTable, oFrom, sAreaID, ""
							, msTabBoundary, sBoundaryAreaIDCol
							, msTabOrigin2Dest, "Origin_Area_ID", "Dest_Area_ID", ""
							, sQueryName, sFrom & "_2_" & sQueryName)
		Call DebugPrint(FormatNumber$(nCounts(1)) & " " & sTo & "(s) found.")

		If nCounts(1) = 0 Then
			Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
			Call TABClose(sSelectionTable)
			Call DDFCloseTempDDTables
			Exit Sub
		Else
			sZoomLayer	= sFrom & "_2_" & sQueryName

			Call MENUAddToQueryTablesToMap(nMID, sQueryName, sFrom & "_2_" & sQueryName, sTo & "s", "")
			nItem	= 2
			Redim mtarrResults(nItem + 1)
			mtarrResults(nItem).sQueryTable 		= sQueryName
			mtarrResults(nItem).sToFromType		= sTo & "s"
			mtarrResults(nItem).sOriginAreaType	= ""
			mtarrResults(nItem + 1).sQueryTable 	= sFrom & "_2_" & sQueryName
			mtarrResults(nItem + 1).sToFromType	= sTo & "s"
			mtarrResults(nItem + 1).sOriginAreaType	= ""
		End If
	End If

	Call MENUAddFromQueryTablesToMap(nMID, mtarrResults(1).sQueryTable, mtarrResults(1).sToFromType)

	Call TABClose(sSelectionTable)

	Call DebugPrint("Zooming to extent of layer '" & sZoomLayer & "'")
	Set Window nMID Enhanced On
	Set Map
		Window nMID
		Zoom Entire Layer sZoomLayer

	If DDCSplitByWorkerHome() Then
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " Home " & sTo & "s and "
					& FormatNumber$(nCounts(2)) & " Work " & sTo & "s"
				, Notify_Info, 10000)
	Else
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " " & sTo & "s"
				, Notify_Info, 10000)
	End If

	Call MENUEnableDisableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUDestination2OriginsFromSel")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Pitney Bowes Business Insight
'Parameters:
'
'**********************************************************************************************''
Sub MENUOrigin2DestinationsFromSel

Dim	oPoint, oFrom As Object,
	aOBJ As Alias,
	sFrom, sTo, sAreaID, sQueryName, sZoomLayer, sSelectionTable, sOriginAreaType, sOriginAreaTypeCol, sBoundaryAreaIDCol As String,
	i, nItem, nMID, nGroupLayerID, nCounts(2) As Integer

OnError GoTo ErrorOccured

	sFrom	= "Orig"
	sTo		= "Dest"

	If FrontWindow() = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please set a map window as the active window!", Notify_Error, 10000)
		Exit Sub
	End If
	nMID = FrontWindow()
	If Not WindowInfo(nMID, WIN_INFO_TYPE) = WIN_MAPPER Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please set a map window as the active window!", Notify_Error, 10000)
		Exit Sub
	End If

	If not MENUOpenDDInputTables() Then
		Exit Sub
	End If

	If SelectionInfo(SEL_INFO_NROWS) = 0 Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please select the destination area for the analysis!", Notify_Error, 10000)
		Exit Sub
	End If
	If Not SelectionInfo(SEL_INFO_TABLENAME) = msTabBoundary Then
		Call RBNNotificationShow(PRGIGetApplicationName(), "Please select the destination area for the analysis from the boundary table, '" & msTabBoundary & "'!", Notify_Error, 10000)
		Exit Sub
	End If
	sSelectionTable	= SelectionInfo(SEL_INFO_SELNAME)

	Call DDFCloseTempDDTables()
'	sODAreaIDCol			= IIf(sFrom="Orig", "Dest_Area_ID", "Origin_Area_ID")
'	sODAreaIDStartCol		= IIf(sFrom="Orig", "Origin_Area_ID", "Dest_Area_ID")

	sQueryName		= sFrom & "_DD"
	sBoundaryAreaIDCol	= IIf(COLExists(msTabBoundary, "Area_ID")=TRUE, "Area_ID", "Origin_Area_ID")
'	sBoundaryAreaIDCol	= IIf(COLExists(msTabBoundary, "Area_ID")=TRUE, "Area_ID", "Dest_Area_ID")
	sAreaID			= MENUCreateFromQueryTableFromTab(sSelectionTable, msTabBoundary, sBoundaryAreaIDCol, sQueryName)
	If sAreaID = "" Then
		Call TABClose(sSelectionTable)
		Exit Sub
	End If
	Call DebugPrint(FormatNumber$(TableInfo(sQueryName, TAB_INFO_NROWS)) & " " & sFrom & "(s) found using " & sAreaID)

	Fetch First From sQueryName
	aOBJ		= sQueryName & ".OBJ"
	oFrom	= aOBJ

	Redim mtarrResults(1)
	mtarrResults(1).sQueryTable 		= sQueryName
	mtarrResults(1).sToFromType		= sFrom
	mtarrResults(1).sOriginAreaType	= ""

	If DDCSplitByWorkerHome() Then
		For i = 1 To 2
			sOriginAreaType	= IIf(i = 1, "Home", "Work")
			sOriginAreaTypeCol	= IIf(i = 1, "PPT_H", "PPT_W")
			sQueryName		= sTo & "s_" & sOriginAreaType & "_DD"

			nCounts(i)	= MENUCreateToQueryTablesFromTab( sSelectionTable, oFrom, sAreaID, sOriginAreaType
								, msTabBoundary, sBoundaryAreaIDCol
								, msTabOrigin2Dest, "Dest_Area_ID", "Origin_Area_ID", sOriginAreaTypeCol	'"Origin_Area_Type"
'								, msTabOrigin2Dest, "Origin_Area_ID", "Dest_Area_ID", sOriginAreaTypeCol	'"Origin_Area_Type"
								, sQueryName, sFrom & "_2_" & sQueryName)
			Call DebugPrint(FormatNumber$(nCounts(i)) & " " & sTo & "(s) found for '" & sOriginAreaType & "'.")

			If nCounts(i) = 0 Then
				Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons '" & sOriginAreaType & "' found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
				Call TABClose(sSelectionTable)
				Call DDFCloseTempDDTables
				Exit Sub
			Else
				Call MENUAddToQueryTablesToMap(nMID, sQueryName, sFrom & "_2_" & sQueryName, sTo & "s", sOriginAreaType)
				nItem	= 2 * i
				Redim mtarrResults(nItem + 1)
				mtarrResults(nItem).sQueryTable 		= sQueryName
				mtarrResults(nItem).sToFromType		= sTo & "s"
				mtarrResults(nItem).sOriginAreaType	= sOriginAreaType
				mtarrResults(nItem + 1).sQueryTable 	= sFrom & "_2_" & sQueryName
				mtarrResults(nItem + 1).sToFromType	= sTo & "s"
				mtarrResults(nItem + 1).sOriginAreaType	= sOriginAreaType
			End If
		Next

		sZoomLayer	= sTo & "s_" & IIf(nCounts(1) > nCounts(2), "Home", "Work") & "_DD"
	Else
		sQueryName	= sTo & "s_DD"

		nCounts(1)	= MENUCreateToQueryTablesFromTab( sSelectionTable, oFrom, sAreaID, ""
							, msTabBoundary, sBoundaryAreaIDCol
							, msTabOrigin2Dest, "Dest_Area_ID", "Origin_Area_ID", ""
'							, msTabOrigin2Dest, "Origin_Area_ID", "Dest_Area_ID", ""
							, sQueryName, sFrom & "_2_" & sQueryName)
		Call DebugPrint(FormatNumber$(nCounts(1)) & " " & sTo & "(s) found.")

		If nCounts(1) = 0 Then
			Call RBNNotificationShow(PRGIGetApplicationName(), "No " & sTo & " Dynamic Demographic Polygons found for Area_ID '" & sAreaID & "'!", Notify_Error, 10000)
			Call TABClose(sSelectionTable)
			Call DDFCloseTempDDTables
			Exit Sub
		Else
			sZoomLayer	= sFrom & "_2_" & sQueryName

			Call MENUAddToQueryTablesToMap(nMID, sQueryName, sFrom & "_2_" & sQueryName, sTo & "s", "")
			nItem	= 2
			Redim mtarrResults(nItem + 1)
			mtarrResults(nItem).sQueryTable 		= sQueryName
			mtarrResults(nItem).sToFromType		= sTo & "s"
			mtarrResults(nItem).sOriginAreaType	= ""
			mtarrResults(nItem + 1).sQueryTable 	= sFrom & "_2_" & sQueryName
			mtarrResults(nItem + 1).sToFromType	= sTo & "s"
			mtarrResults(nItem + 1).sOriginAreaType	= ""
		End If
	End If

	Call MENUAddFromQueryTablesToMap(nMID, mtarrResults(1).sQueryTable, mtarrResults(1).sToFromType)

	Call TABClose(sSelectionTable)

	Call DebugPrint("Zooming to extent of layer '" & sZoomLayer & "'")
	Set Window nMID Enhanced On
	Set Map
		Window nMID
		Zoom Entire Layer sZoomLayer

	If DDCSplitByWorkerHome() Then
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " Home " & sTo & "s and "
					& FormatNumber$(nCounts(2)) & " Work " & sTo & "s"
				, Notify_Info, 10000)
	Else
		Call RBNNotificationShow(PRGIGetApplicationName(), sFrom & " " & sAreaID & " has "
					& FormatNumber$(nCounts(1)) & " " & sTo & "s"
				, Notify_Info, 10000)
	End If

	Call MENUEnableDisableControls

	Exit Sub
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUOrigin2DestinationsFromSel")
	Call ERRShow()

End Sub

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUGetLayerPen(ByVal sType As String) As Pen

OnError GoTo ErrorOccured

MENUGetLayerPen = MakePen(2,1,45056)

	Do Case sType
		Case "Origin", "Orig"
			MENUGetLayerPen = MakePen(2,1,16711680)
		Case "Origins", "Origs"
			MENUGetLayerPen = MakePen(2,1,16711680)
		Case "Destination", "Dest"
			MENUGetLayerPen = MakePen(2,1,45056)
		Case "Destinations", "Dests"
			MENUGetLayerPen = MakePen(2,1,45056)
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUGetLayerPen")
	Call ERRShow()

End Function

'**********************************************************************************************''
'Created by Peter Horsbøll Møller, Precisely
'Parameters:
'	:
'Return value:
'
'**********************************************************************************************''
Function MENUGetLayerBrush(ByVal sType As String) As Pen

OnError GoTo ErrorOccured

MENUGetLayerBrush = MakePen(2,1,45056)

	Do Case sType
		Case "Origin", "Orig"
			MENUGetLayerBrush = MakeBrush(2,16711680,16777215)
		Case "Origins", "Origs"
			MENUGetLayerBrush = MakeBrush(2,16711680,16777215)
		Case "Destination", "Dest"
			MENUGetLayerBrush = MakeBrush(2,45056,45056)
		Case "Destinations", "Dests"
			MENUGetLayerBrush = MakeBrush(2,45056,45056)
	End Case

	Exit Function
'-------------------------
ErrorOccured:
	Call ERRCreate(Err(), Error$(), "MENUGetLayerBrush")
	Call ERRShow()

End Function